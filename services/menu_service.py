# services/menu_service.py

"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—é –ø–æ —Ä–æ–ª—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø
"""

import logging
from typing import List, Dict, Any
from telegram import InlineKeyboardButton

from bot.middleware.security import check_user_role
from config.settings import OWNER_ID, REPORTS_GROUP_URL
from utils.localization import get_text, get_user_language
from database.queries import db_query

try:
    from services.workflow_service import WorkflowService
    WORKFLOW_AVAILABLE = True
except ImportError:
    WORKFLOW_AVAILABLE = False

logger = logging.getLogger(__name__)

class MenuService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    @staticmethod
    async def get_main_menu_text_and_buttons(user_id: str):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_role = check_user_role(user_id)
        lang =  await get_user_language(user_id)
        
        welcome_text = get_text('welcome_message', lang)
        keyboard_buttons = await MenuService._build_menu_buttons(user_id, user_role, lang)

        return welcome_text, keyboard_buttons
    
    @staticmethod
    def _get_user_role_info(user_role: Dict[str, Any], lang: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
        role_parts = []
        
        # FIXED: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_role –Ω–µ –ø—É—Å—Ç–æ–π
        if not user_role:
            return "–†–æ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
        
        # –°—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä
        if user_role.get('isSupervisor'):
            supervisor_name = user_role.get('supervisorName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            brigades = user_role.get('assignedBrigades', [])
            brigade_text = f" ({len(brigades)} –±—Ä–∏–≥–∞–¥)" if brigades else ""
            role_parts.append(f"üë®‚Äçüîß {supervisor_name}{brigade_text}")
        
        # –ú–∞—Å—Ç–µ—Ä
        if user_role.get('isMaster'):
            master_name = user_role.get('masterName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            discipline = user_role.get('discipline', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è')
            role_parts.append(f"üî® {master_name} ({discipline})")
        
        # –ë—Ä–∏–≥–∞–¥–∏—Ä
        if user_role.get('isBrigade'):
            brigade_name = user_role.get('brigadeName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            role_parts.append(f"üë∑ –ë—Ä–∏–≥–∞–¥–∏—Ä –±—Ä–∏–≥–∞–¥—ã ¬´{brigade_name}¬ª")
            
        # –ú–µ–Ω–µ–¥–∂–µ—Ä
        if user_role.get('isManager'):
            level = user_role.get('managerLevel', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            if level == 1:
                role_parts.append("üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)")
            else:
                discipline = user_role.get('discipline', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è')
                role_parts.append(f"üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã ¬´{discipline}¬ª")
                
        # –ü–¢–û
        if user_role.get('isPto'):
            discipline = user_role.get('discipline', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è')
            role_parts.append(f"üè≠ –ü–¢–û –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã ¬´{discipline}¬ª")
            
        # –ö–ò–û–ö
        if user_role.get('isKiok'):
            discipline = user_role.get('discipline', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è')
            role_parts.append(f"üìä –ö–ò–û–ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã ¬´{discipline}¬ª")
            
        # –ê–¥–º–∏–Ω
        if user_role.get('isAdmin'):
            role_parts.append("‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        
        # FIXED: –ï—Å–ª–∏ —Ä–æ–ª–µ–π –Ω–µ—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        if not role_parts:
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—Ä–æ–ª—å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞)"
        
        return " | ".join(role_parts)
    
    @staticmethod
    async def _build_menu_buttons(user_id: str, user_role: Dict[str, Any], lang: str) -> List[List[InlineKeyboardButton]]:
        """–°—Ç—Ä–æ–∏—Ç –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        buttons = []
        
        # –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—á–∞—é—Ç –∑–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ –¥–æ—Å—Ç—É–ø–∞
        role_keys = ['isSupervisor', 'isMaster', 'isForeman', 'isBrigade', 'isManager', 'isPto', 'isKiok', 'isAdmin']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∏–∑ —ç—Ç–∏—Ö —Ä–æ–ª–µ–π
        is_authorized = any(user_role.get(key) for key in role_keys)

        # --- –ú–µ–Ω—é –¥–ª—è –ê–í–¢–û–†–ò–ó–û–í–ê–ù–ù–´–• (–≤–∫–ª—é—á–∞—è Owner) ---
        if is_authorized or user_id == OWNER_ID:
            # –ö–Ω–æ–ø–∫–∏ –ø–æ —Ä–æ–ª—è–º
            if user_id == OWNER_ID:
                buttons.extend([
                    [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç", callback_data="new_report")],
                    [InlineKeyboardButton("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤", callback_data="report_menu_all")],
                    [InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="report_historical")],  # ADDED
                    [InlineKeyboardButton("üìã –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="get_excel_report")],  # ADDED
                    [InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="manage_menu")]
                ])
            elif user_role.get('isSupervisor'):
                buttons.extend([
                    [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç", callback_data="new_report")],
                    [InlineKeyboardButton("üìã –ú–æ–∏ –æ—Ç—á–µ—Ç—ã", callback_data="my_reports")]
                ])
            elif user_role.get('isMaster'):
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç—á–µ—Ç–æ–≤
                pending_count = 0
                if WORKFLOW_AVAILABLE:
                    try:
                        pending_reports = await WorkflowService.get_pending_reports_for_master(user_id)  # FIXED: –¥–æ–±–∞–≤–ª–µ–Ω await
                        pending_count = len(pending_reports)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞: {e}")
                
                master_button_text = f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç—á–µ—Ç—ã ({pending_count})" if pending_count > 0 else "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç—á–µ—Ç—ã"
                buttons.extend([
                    [InlineKeyboardButton(master_button_text, callback_data="approve_reports")],
                    [InlineKeyboardButton("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤", callback_data="report_menu_all")]
                ])
            elif user_role.get('isForeman') or user_role.get('isBrigade'):
                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ç–∞–±–µ–ª—è
                roster_button_text = await MenuService._get_roster_button_text(user_id, lang)
                buttons.extend([
                    [InlineKeyboardButton(roster_button_text, callback_data="submit_roster")]
                ])
            elif user_role.get('isKiok'):
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –ö–ò–û–ö
                pending_count = 0
                if WORKFLOW_AVAILABLE:
                    try:
                        pending_reports = await WorkflowService.get_pending_reports_for_kiok(user_id)  # FIXED: –¥–æ–±–∞–≤–ª–µ–Ω await
                        pending_count = len(pending_reports)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è –ö–ò–û–ö: {e}")
                
                kiok_button_text = f"üîç –ö–ò–û–ö –ø—Ä–æ–≤–µ—Ä–∫–∞ ({pending_count})" if pending_count > 0 else "üîç –ö–ò–û–ö –ø—Ä–æ–≤–µ—Ä–∫–∞"
                buttons.extend([
                    [InlineKeyboardButton(kiok_button_text, callback_data="kiok_review")],
                    [InlineKeyboardButton("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤", callback_data="report_menu_all")],
                    [InlineKeyboardButton("üìã –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="get_excel_report")]  # ADDED
                ])
            elif user_role.get('isManager') or user_role.get('isPto'):
                buttons.extend([
                    [InlineKeyboardButton("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤", callback_data="report_menu_all")],
                    [InlineKeyboardButton("üìà –û–±–∑–æ—Ä–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="report_overview")],  # ADDED
                    [InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã", callback_data="report_historical")],  # ADDED
                    [InlineKeyboardButton("üìã –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="get_excel_report")]  # ADDED
                ])
            elif user_role.get('isAdmin'):
                buttons.extend([
                    [InlineKeyboardButton("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤", callback_data="report_menu_all")],
                    [InlineKeyboardButton("üìà –ü–æ–ª–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="report_historical")],  # ADDED
                    [InlineKeyboardButton("üìã –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="get_excel_report")],  # ADDED
                    [InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="manage_menu")]
                ])
            
            # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
            buttons.append([InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="show_profile")])
            if REPORTS_GROUP_URL:
                buttons.append([InlineKeyboardButton("‚û°Ô∏è –ì—Ä—É–ø–ø–∞ –æ—Ç—á–µ—Ç–æ–≤", url=REPORTS_GROUP_URL)])

        # --- –ú–µ–Ω—é –¥–ª—è –ù–ï–ê–í–¢–û–†–ò–ó–û–í–ê–ù–ù–´–• ---
        else:
            buttons.extend([
                [InlineKeyboardButton("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", callback_data="start_auth")],
                [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="show_info")]
            ])

        return buttons
    
    @staticmethod
    async def _get_roster_button_text(user_id: str, lang: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Ç–∞–±–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞"""
        from datetime import date
        try:
            today_str = date.today().strftime('%Y-%m-%d')
            if  await db_query("SELECT id FROM daily_rosters WHERE brigade_user_id = %s AND roster_date = %s", (user_id, today_str)):
                return "‚úÖ –¢–∞–±–µ–ª—å –ø–æ–¥–∞–Ω"
            return "üìã –ü–æ–¥–∞—Ç—å —Ç–∞–±–µ–ª—å"
        except Exception:
            return "üìã –ü–æ–¥–∞—Ç—å —Ç–∞–±–µ–ª—å"