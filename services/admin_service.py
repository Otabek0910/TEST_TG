# services/admin_service.py

import logging
from typing import Dict, Any
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from config.settings import OWNER_ID
from database.queries import db_query, db_execute

logger = logging.getLogger(__name__)

class AdminService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)"""
    
    @staticmethod
    async def get_admin_list():
        """ASYNC –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤"""
        admin_ids_raw = await db_query("SELECT user_id FROM admins")
        admin_ids = [row[0] for row in admin_ids_raw] if admin_ids_raw else []
        return list(set(admin_ids + [OWNER_ID]))
    
    @staticmethod
    async def send_approval_request(
        context: ContextTypes.DEFAULT_TYPE,
        user_data: Dict[str, Any],
        user_id: str
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º"""
        try:
            context.bot_data[user_id] = user_data
            
            # # FIXED: –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ä–æ–ª–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            role_map = {
                'foreman': '–ë—Ä–∏–≥–∞–¥–∏—Ä', 'manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä', 'pto': '–ü–¢–û',
                'kiok': '–ö–ò–û–ö', 'supervisor': '–°—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä', 'master': '–ú–∞—Å—Ç–µ—Ä'
            }
            role_key = user_data.get('selected_role', 'unknown')
            role_text = role_map.get(role_key, role_key.capitalize())
            
            discipline_text = ""
            if user_data.get('discipline_id'):
                disc_result = await db_query("SELECT name FROM disciplines WHERE id = %s", (user_data['discipline_id'],))
                if disc_result:
                    discipline_text = f"\nüìã –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {disc_result[0][0]}"
            
            level_text = ""
            if user_data.get('manager_level'):
                level_text = f"\n‚öôÔ∏è –£—Ä–æ–≤–µ–Ω—å: {user_data['manager_level']}"
            
            request_text = (
                f"üîê <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é</b>\n\n"
                f"üë§ –ò–º—è: {user_data.get('first_name', '')} {user_data.get('last_name', '')}\n"
                f"üÜî ID: <code>{user_id}</code>\n"
                f"üëî –†–æ–ª—å: {role_text}"
                f"{discipline_text}{level_text}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                f"–û–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É?"
            )
            
            approve_callback = f"approve_{role_key}_{user_id}"
            reject_callback = f"reject_{role_key}_{user_id}"
            
            keyboard = [[
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=approve_callback),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=reject_callback)
            ]]
            
            admins = await AdminService.get_admin_list()
            for admin_id in admins:
                try:
                    await context.bot.send_message(
                        admin_id, request_text,
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode=ParseMode.HTML
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ: {e}")
            return False
    
    @staticmethod
    async def create_user_in_db(user_data: Dict[str, Any], user_id: str) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ –ë–î"""
        try:
            role = user_data.get('selected_role')
            first_name = user_data.get('first_name', '')
            last_name = user_data.get('last_name', '')
            phone = user_data.get('phone_number', '')
            discipline_id = user_data.get('discipline_id')
            
            # # FIXED: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è supervisor
            if role == 'supervisor':
                supervisor_name = f"{first_name} {last_name}"
                return await db_execute(
                    """INSERT INTO supervisors (user_id, supervisor_name, discipline_id, phone_number) 
                       VALUES (%s, %s, %s, %s) ON CONFLICT (user_id) DO NOTHING""",
                    (user_id, supervisor_name, discipline_id, phone)
                )
            # # FIXED: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è master
            elif role == 'master':
                master_name = f"{first_name} {last_name}"
                return await db_execute(
                    """INSERT INTO masters (user_id, master_name, discipline_id, phone_number) 
                       VALUES (%s, %s, %s, %s) ON CONFLICT (user_id) DO NOTHING""",
                    (user_id, master_name, discipline_id, phone)
                )
            # # FIXED: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è foreman (—Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ brigades)
            elif role == 'foreman':
                brigade_name = f"{first_name} {last_name}"
                return await db_execute(
                    """INSERT INTO brigades (user_id, brigade_name, discipline_id, first_name, last_name, phone_number) 
                       VALUES (%s, %s, %s, %s, %s, %s) ON CONFLICT (user_id) DO NOTHING""",
                    (user_id, brigade_name, discipline_id, first_name, last_name, phone)
                )
            elif role == 'manager':
                level = user_data.get('manager_level', 2)
                # –î–ª—è –£—Ä–æ–≤–Ω—è 1 discipline_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å NULL
                manager_discipline = discipline_id if level == 2 else None
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'discipline' –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã manager, –∫–∞–∫ –º—ã –≤—ã—è—Å–Ω–∏–ª–∏ —Ä–∞–Ω–µ–µ
                return await db_execute(
                    """INSERT INTO managers (user_id, level, discipline, first_name, last_name, phone_number) 
                       VALUES (%s, %s, %s, %s, %s, %s) ON CONFLICT (user_id) DO NOTHING""",
                    (user_id, level, manager_discipline, first_name, last_name, phone)
                )
            # # FIXED: –ó–∞–ø—Ä–æ—Å—ã –¥–ª—è pto –∏ kiok —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç discipline_id
            elif role == 'pto':
                return await db_execute(
                    """INSERT INTO pto (user_id, discipline_id, first_name, last_name, phone_number) 
                       VALUES (%s, %s, %s, %s, %s) ON CONFLICT (user_id) DO NOTHING""",
                    (user_id, discipline_id, first_name, last_name, phone)
                )
            elif role == 'kiok':
                return await db_execute(
                    """INSERT INTO kiok (user_id, discipline_id, first_name, last_name, phone_number) 
                       VALUES (%s, %s, %s, %s, %s) ON CONFLICT (user_id) DO NOTHING""",
                    (user_id, discipline_id, first_name, last_name, phone)
                )
            else:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {role}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –ë–î: {e}")
            return False