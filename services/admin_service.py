# services/admin_service.py

import logging
from typing import Dict, Any
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from config.settings import OWNER_ID
from database.queries import db_query, db_execute

logger = logging.getLogger(__name__)

class AdminService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)"""
    
    @staticmethod
    async def get_admin_list():
        """ASYNC –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤"""
        admin_ids_raw = await db_query("SELECT user_id FROM admins")
        admin_ids = [row[0] for row in admin_ids_raw] if admin_ids_raw else []
        return list(set(admin_ids + [OWNER_ID]))
    
    @staticmethod
    async def send_approval_request(
        context: ContextTypes.DEFAULT_TYPE,
        user_data: Dict[str, Any],
        user_id: str
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º - –ò–°–ü–†–ê–í–õ–ï–ù–û –¥–ª—è StateManager"""
        try:
            # FIXED: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"DEBUG >>> –ü–û–õ–£–ß–ò–õ–ò user_data: {user_data}")
            logger.info(f"DEBUG >>> –ö–ª—é—á–∏ –≤ user_data: {list(user_data.keys())}")
            
            # FIXED: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            required_fields = ['selected_role', 'first_name', 'last_name', 'phone_number']
            missing_fields = [field for field in required_fields if not user_data.get(field)]
            
            if missing_fields:
                logger.error(f"DEBUG >>> –û–¢–°–£–¢–°–¢–í–£–Æ–¢ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø: {missing_fields}")
                logger.error(f"DEBUG >>> –ü–û–õ–ù–´–ï –î–ê–ù–ù–´–ï: {user_data}")
                return False
            
            # FIXED: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è
            context.bot_data[user_id] = user_data
            logger.info(f"DEBUG >>> –°–û–•–†–ê–ù–ò–õ–ò –≤ context.bot_data[{user_id}]: {context.bot_data.get(user_id)}")
            
            # FIXED: –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ä–æ–ª–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            role_map = {
                'foreman': '–ë—Ä–∏–≥–∞–¥–∏—Ä', 'manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä', 'pto': '–ü–¢–û',
                'kiok': '–ö–ò–û–ö', 'supervisor': '–°—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä', 'master': '–ú–∞—Å—Ç–µ—Ä'
            }
            role_key = user_data.get('selected_role', 'unknown')
            role_text = role_map.get(role_key, role_key.capitalize())
            
            discipline_text = ""
            if user_data.get('discipline_id'):
                disc_result = await db_query("SELECT name FROM disciplines WHERE id = %s", (user_data['discipline_id'],))
                if disc_result:
                    discipline_text = f"\nüìã –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {disc_result[0][0]}"
            
            level_text = ""
            if user_data.get('manager_level'):
                level_text = f"\n‚öôÔ∏è –£—Ä–æ–≤–µ–Ω—å: {user_data['manager_level']}"
            
            # FIXED: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –≤—ã–≤–æ–¥–∏–º –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            phone_number = user_data.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω')
            logger.info(f"DEBUG >>> –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {phone_number}")
            
            request_text = (
                f"üîê <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é</b>\n\n"
                f"üë§ –ò–º—è: {user_data.get('first_name', '')} {user_data.get('last_name', '')}\n"
                f"üÜî ID: <code>{user_id}</code>\n"
                f"üëî –†–æ–ª—å: {role_text}"
                f"{discipline_text}{level_text}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n\n"
                f"–û–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É?"
            )
            
            approve_callback = f"approve_{role_key}_{user_id}"
            reject_callback = f"reject_{role_key}_{user_id}"
            
            keyboard = [[
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=approve_callback),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=reject_callback)
            ]]
            
            admins = await AdminService.get_admin_list()
            for admin_id in admins:
                try:
                    await context.bot.send_message(
                        admin_id, request_text,
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode=ParseMode.HTML
                    )
                    logger.info(f"DEBUG >>> –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É {admin_id}")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ: {e}")
            return False
    
    @staticmethod
    async def create_user_in_db(user_data: Dict[str, Any], user_id: str) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ –ë–î - –ò–°–ü–†–ê–í–õ–ï–ù–û –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—É—é —Å—Ö–µ–º—É"""
        try:
            role = user_data.get('selected_role')
            first_name = user_data.get('first_name', '')
            last_name = user_data.get('last_name', '')
            phone = user_data.get('phone_number', '')
            discipline_id = user_data.get('discipline_id')
            
            # FIXED: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∑–∞–ø—Ä–æ—Å—ã –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—É—é —Å—Ö–µ–º—É –ë–î
            if role == 'supervisor':
                supervisor_name = f"{first_name} {last_name}"
                result = await db_execute(
                    """INSERT INTO supervisors (user_id, supervisor_name, discipline_id, phone_number) 
                       VALUES (%s, %s, %s, %s) ON CONFLICT (user_id) DO UPDATE SET
                       supervisor_name = EXCLUDED.supervisor_name,
                       discipline_id = EXCLUDED.discipline_id,
                       phone_number = EXCLUDED.phone_number""",
                    (user_id, supervisor_name, discipline_id, phone)
                )
                
            elif role == 'master':
                master_name = f"{first_name} {last_name}"
                result = await db_execute(
                    """INSERT INTO masters (user_id, master_name, discipline_id, phone_number) 
                       VALUES (%s, %s, %s, %s) ON CONFLICT (user_id) DO UPDATE SET
                       master_name = EXCLUDED.master_name,
                       discipline_id = EXCLUDED.discipline_id,
                       phone_number = EXCLUDED.phone_number""",
                    (user_id, master_name, discipline_id, phone)
                )
                
            elif role == 'foreman':
                brigade_name = f"{first_name} {last_name}"
                result = await db_execute(
                    """INSERT INTO brigades (user_id, brigade_name, discipline_id, first_name, last_name, phone_number) 
                       VALUES (%s, %s, %s, %s, %s, %s) ON CONFLICT (user_id) DO UPDATE SET
                       brigade_name = EXCLUDED.brigade_name,
                       discipline_id = EXCLUDED.discipline_id,
                       first_name = EXCLUDED.first_name,
                       last_name = EXCLUDED.last_name,
                       phone_number = EXCLUDED.phone_number""",
                    (user_id, brigade_name, discipline_id, first_name, last_name, phone)
                )
                
            elif role == 'manager':
                level = user_data.get('manager_level', 2)
                # –î–ª—è –£—Ä–æ–≤–Ω—è 1 discipline_id –º–æ–∂–µ—Ç –±—ã—Ç—å NULL
                final_discipline_id = discipline_id if level == 2 else None
                result = await db_execute(
                    """INSERT INTO managers (user_id, level, discipline, first_name, last_name, phone_number) 
                       VALUES (%s, %s, %s, %s, %s, %s) ON CONFLICT (user_id) DO UPDATE SET
                       level = EXCLUDED.level,
                       discipline = EXCLUDED.discipline,
                       first_name = EXCLUDED.first_name,
                       last_name = EXCLUDED.last_name,
                       phone_number = EXCLUDED.phone_number""",
                    (user_id, level, final_discipline_id, first_name, last_name, phone)
                )
                
            elif role == 'pto':
                result = await db_execute(
                    """INSERT INTO pto (user_id, discipline_id, first_name, last_name, phone_number) 
                       VALUES (%s, %s, %s, %s, %s) ON CONFLICT (user_id) DO UPDATE SET
                       discipline_id = EXCLUDED.discipline_id,
                       first_name = EXCLUDED.first_name,
                       last_name = EXCLUDED.last_name,
                       phone_number = EXCLUDED.phone_number""",
                    (user_id, discipline_id, first_name, last_name, phone)
                )
                
            elif role == 'kiok':
                kiok_name = f"{first_name} {last_name}"
                result = await db_execute(
                    """INSERT INTO kiok (user_id, kiok_name, discipline_id, phone_number) 
                       VALUES (%s, %s, %s, %s) ON CONFLICT (user_id) DO UPDATE SET
                       kiok_name = EXCLUDED.kiok_name,
                       discipline_id = EXCLUDED.discipline_id,
                       phone_number = EXCLUDED.phone_number""",
                    (user_id, kiok_name, discipline_id, phone)
                )
                
            else:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å: {role}")
                return False
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–∑–¥–∞–Ω —Å —Ä–æ–ª—å—é {role}, –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫: {result}")
            return result > 0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {e}")
            return False