# services/user_management_service.py

import logging
from typing import Dict, Any, List, Optional, Tuple
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode

from database.queries import db_query, db_execute
from utils.localization import get_user_language, get_text
from config.settings import OWNER_ID

logger = logging.getLogger(__name__)

class UserManagementService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""

    USERS_PER_PAGE = 5
    
    @staticmethod
    async def show_user_edit_menu(query, role: str, user_id_to_edit: str, viewer_id: str) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = await db_query(f"SELECT first_name, last_name, username, phone_number FROM {role} WHERE user_id = %s", (user_id_to_edit,))
            
            if not user_data:
                await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
                
            first_name = user_data[0][0] or ""
            last_name = user_data[0][1] or ""
            username = user_data[0][2] or ""
            phone = user_data[0][3] or ""
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
            role_info = await UserManagementService.get_role_specific_info(role, user_id_to_edit)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info_lines = [
                f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name} {last_name}**",
                f"üÜî ID: `{user_id_to_edit}`",
                f"üë§ Username: @{username}" if username else "üë§ Username: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}" if phone else "üì± –¢–µ–ª–µ—Ñ–æ–Ω: –ù–µ —É–∫–∞–∑–∞–Ω",
                f"üìã **–†–æ–ª—å: {UserManagementService.get_role_display_name(role)}**",
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –¥–ª—è —Ä–æ–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if role_info:
                user_info_lines.extend(role_info)
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            keyboard = []
            
            # –ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ (–¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
            is_admin = await UserManagementService.is_admin(viewer_id)
            if is_admin:
                keyboard.append([InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data=f"change_role_{role}_{user_id_to_edit}")])
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
            if role == "managers":
                keyboard.append([InlineKeyboardButton("üè¢ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É", callback_data=f"change_discipline_{user_id_to_edit}")])
                keyboard.append([InlineKeyboardButton("üîù –ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data=f"change_level_{user_id_to_edit}")])
            
            if role in ["brigades", "masters", "supervisors"]:
                keyboard.append([InlineKeyboardButton("üßæ –°–±—Ä–æ—Å–∏—Ç—å —Ç–∞–±–µ–ª—å", callback_data=f"reset_roster_{role}_{user_id_to_edit}")])
            
            if is_admin:
                keyboard.append([InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"delete_user_{role}_{user_id_to_edit}")])
            
            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"list_users_{role}_1")])
            
            await query.edit_message_text(
                text="\n".join(user_info_lines),
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_users")
                ]])
            )
    
    @staticmethod
    async def get_role_specific_info(role: str, user_id: str) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –¥–ª—è —Ä–æ–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        info_lines = []
        
        try:
            if role == "managers":
                manager_data = db_query("SELECT manager_level, discipline FROM managers WHERE user_id = %s", (user_id,))
                if manager_data:
                    level = manager_data[0][0]
                    discipline_id = manager_data[0][1]
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
                    discipline_name = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                    if discipline_id:
                        discipline_data = db_query("SELECT name FROM disciplines WHERE id = %s", (discipline_id,))
                        if discipline_data:
                            discipline_name = discipline_data[0][0]
                    
                    level_text = "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø" if level == 1 else f"–£—Ä–æ–≤–µ–Ω—å {level}"
                    info_lines.append(f"üî∞ –£—Ä–æ–≤–µ–Ω—å: **{level_text}**")
                    info_lines.append(f"üè¢ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: **{discipline_name}**")
            
            elif role in ["brigades", "masters", "supervisors"]:
                # –î–ª—è –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤, –º–∞—Å—Ç–µ—Ä–æ–≤ –∏ —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–æ–≤ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–∏–≥–∞–¥–µ –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ
                query_text = f"SELECT brigade_name, discipline FROM {role} WHERE user_id = %s"
                role_data = db_query(query_text, (user_id,))
                
                if role_data:
                    brigade_name = role_data[0][0] or "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                    discipline_id = role_data[0][1]
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
                    discipline_name = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                    if discipline_id:
                        discipline_data = db_query("SELECT name FROM disciplines WHERE id = %s", (discipline_id,))
                        if discipline_data:
                            discipline_name = discipline_data[0][0]
                    
                    entity_name = "–ë—Ä–∏–≥–∞–¥–∞" if role == "brigades" else "–£—á–∞—Å—Ç–æ–∫" if role == "masters" else "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
                    info_lines.append(f"üö© {entity_name}: **{brigade_name}**")
                    info_lines.append(f"üè¢ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: **{discipline_name}**")
            
            elif role in ["pto", "kiok"]:
                # –î–ª—è –ü–¢–û –∏ –ö–ò–û–ö –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ
                role_data = db_query(f"SELECT discipline FROM {role} WHERE user_id = %s", (user_id,))
                
                if role_data:
                    discipline_id = role_data[0][0]
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
                    discipline_name = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                    if discipline_id:
                        discipline_data = db_query("SELECT name FROM disciplines WHERE id = %s", (discipline_id,))
                        if discipline_data:
                            discipline_name = discipline_data[0][0]
                    
                    info_lines.append(f"üè¢ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: **{discipline_name}**")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Ä–æ–ª–∏ {role}: {e}")
            info_lines.append("‚ùå _–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏_")
        
        return info_lines
    
    @staticmethod
    def get_role_display_name(role: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏"""
        role_names = {
            "admins": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            "managers": "–ú–µ–Ω–µ–¥–∂–µ—Ä",
            "supervisors": "–°—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä",
            "masters": "–ú–∞—Å—Ç–µ—Ä",
            "brigades": "–ë—Ä–∏–≥–∞–¥–∏—Ä",
            "pto": "–ü–¢–û",
            "kiok": "–ö–ò–û–ö"
        }
        
        return role_names.get(role, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å")
    
    @staticmethod
    async def is_admin(user_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        if user_id == OWNER_ID:
            return True
            
        admin_data = db_query("SELECT 1 FROM admins WHERE user_id = %s", (user_id,))
        return bool(admin_data)
    
    @staticmethod
    async def list_users_with_pagination(query, role: str, page: int) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            offset = (page - 1) * UserManagementService.USERS_PER_PAGE
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–æ–ª–∏
            total_users = db_query(f"SELECT COUNT(*) FROM {role}")[0][0]
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            users = db_query(
                f"SELECT user_id, first_name, last_name FROM {role} ORDER BY last_name, first_name LIMIT %s OFFSET %s",
                (UserManagementService.USERS_PER_PAGE, offset)
            )
            
            if not users:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É—Å—Ç–∞
                if page > 1:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    await UserManagementService.list_users_with_pagination(query, role, 1)
                    return
                else:
                    await query.edit_message_text(
                        f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {UserManagementService.get_role_display_name(role)} –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_users")
                        ]])
                    )
                    return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_lines = [f"üìã **–°–ø–∏—Å–æ–∫ {UserManagementService.get_role_display_name(role)}–æ–≤:**\n"]
            
            for i, user in enumerate(users, 1):
                user_id, first_name, last_name = user
                full_name = f"{first_name or ''} {last_name or ''}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                user_lines.append(f"{offset + i}. {full_name}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            max_page = (total_users + UserManagementService.USERS_PER_PAGE - 1) // UserManagementService.USERS_PER_PAGE
            user_lines.append(f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {max_page}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = []
            
            # –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for user in users:
                user_id, first_name, last_name = user
                full_name = f"{first_name or ''} {last_name or ''}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                keyboard.append([
                    InlineKeyboardButton(f"‚úèÔ∏è {full_name}", callback_data=f"edit_user_{role}_{user_id}")
                ])
            
            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            nav_buttons = []
            
            if page > 1:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"list_users_{role}_{page-1}"))
            
            if page < max_page:
                nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"list_users_{role}_{page+1}"))
            
            if nav_buttons:
                keyboard.append(nav_buttons)
            
            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="manage_users")])
            
            await query.edit_message_text(
                text="\n".join(user_lines),
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {role}: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_users")
                ]])
            )
    
    @staticmethod
    async def delete_user(role: str, user_id: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–æ–ª–∏"""
        try:
            result = db_execute(f"DELETE FROM {role} WHERE user_id = %s", (user_id,))
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Ä–æ–ª–∏ {role}.")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ —Ä–æ–ª–∏ {role}: {e}")
            return False
    
    @staticmethod
    async def reset_roster(user_id: str) -> bool:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Ç–∞–±–µ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        from datetime import date
        
        try:
            today_str = date.today().strftime('%Y-%m-%d')
            db_execute("DELETE FROM daily_rosters WHERE brigade_user_id = %s AND roster_date = %s", 
                      (user_id, today_str))
            logger.info(f"–¢–∞–±–µ–ª—å –Ω–∞ {today_str} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω.")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ç–∞–±–µ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    @staticmethod
    async def change_discipline(role: str, user_id: str, discipline_id: int) -> bool:
        """–ò–∑–º–µ–Ω—è–µ—Ç –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            db_execute(f"UPDATE {role} SET discipline = %s WHERE user_id = %s", 
                      (discipline_id, user_id))
            logger.info(f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Ä–æ–ª–∏ {role} –∏–∑–º–µ–Ω–µ–Ω–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –Ω–∞ {discipline_id}.")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Ä–æ–ª–∏ {role}: {e}")
            return False
    
    @staticmethod
    async def change_manager_level(user_id: str, level: int, discipline_id: Optional[int] = None) -> bool:
        """–ò–∑–º–µ–Ω—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞, –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É"""
        try:
            if level == 1:
                # –î–ª—è —É—Ä–æ–≤–Ω—è 1 –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –Ω–µ –Ω—É–∂–Ω–∞
                db_execute("UPDATE managers SET level = %s, discipline = NULL WHERE user_id = %s", 
                          (level, user_id))
            else:
                # –î–ª—è —É—Ä–æ–≤–Ω—è 2 –∏ –≤—ã—à–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞
                if discipline_id is None:
                    return False
                
                db_execute("UPDATE managers SET level = %s, discipline = %s WHERE user_id = %s", 
                          (level, discipline_id, user_id))
            
            logger.info(f"–î–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {user_id} –∏–∑–º–µ–Ω–µ–Ω —É—Ä–æ–≤–µ–Ω—å –Ω–∞ {level}.")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {user_id}: {e}")
            return False