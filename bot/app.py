# bot/app.py

"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø (—É–±—Ä–∞–Ω auth_flow)
"""

import logging
import asyncio
import sys
from telegram.ext import Application
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from config.settings import TOKEN, OWNER_ID, DATABASE_URL
from database.connection import db_manager
from bot.handlers.common import register_common_handlers
from bot.handlers.workflow import register_workflow_handlers, create_rejection_conversation
from bot.handlers.approval import register_approval_handlers
from bot.handlers.analytics import register_analytics_handlers
from bot.handlers.admin import register_admin_handlers, create_admin_management_conversation, create_db_restore_conversation, create_hr_date_conversation
from bot.handlers.auth_new import register_new_auth_handlers  # CHANGED: –∏—Å–ø–æ–ª—å–∑—É–µ–º auth_new –Ω–∞–ø—Ä—è–º—É—é
from bot.conversations.report_flow import create_report_conversation
from bot.conversations.roster_flow import create_roster_conversation

logger = logging.getLogger(__name__)

async def run_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    logger.info("=" * 50)
    logger.info("üöÄ –ë–û–¢ –ó–ê–ü–£–°–ö–ê–ï–¢–°–Ø...")
    logger.info(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DATABASE_URL.split('@')[1] if '@' in DATABASE_URL else '–ª–æ–∫–∞–ª—å–Ω–∞—è'}")
    logger.info(f"üëë Owner ID: {OWNER_ID}")
    logger.info("=" * 50)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î —Å—Ä–∞–∑—É
    await db_manager.initialize()
    logger.info("‚úÖ Database –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    register_common_handlers(application)
    register_new_auth_handlers(application)
    register_approval_handlers(application)
    register_workflow_handlers(application)
    register_analytics_handlers(application)
    register_admin_handlers(application)

    # ConversationHandlers
    application.add_handler(create_report_conversation())
    application.add_handler(create_roster_conversation())
    application.add_handler(create_rejection_conversation())
    application.add_handler(create_admin_management_conversation())
    application.add_handler(create_db_restore_conversation())
    application.add_handler(create_hr_date_conversation())

    logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler = AsyncIOScheduler(timezone='Asia/Tashkent')
    try:
        from services.notification_service import NotificationService
        scheduler.add_job(NotificationService.process_scheduled_notifications, 'cron', hour=8, minute=0, args=[application])
        scheduler.add_job(NotificationService.send_pending_report_reminders, 'cron', hour=10, minute=0, args=[application.bot])
        scheduler.start()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

    try:
        # FIXED: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º polling...")
        
        await application.initialize()
        await application.start()
        await application.updater.start_polling(drop_pending_updates=True)
        
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            # –°–æ–∑–¥–∞–µ–º Future –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω –ø—Ä–∏ KeyboardInterrupt
            stop_event = asyncio.Event()
            await stop_event.wait()
        except asyncio.CancelledError:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
            
    except KeyboardInterrupt:
        logger.info("üëã –ü–æ–ª—É—á–µ–Ω Ctrl+C...")
    finally:
        # FIXED: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        logger.info("üîÑ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        try:
            # 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            if 'scheduler' in locals() and scheduler.running:
                scheduler.shutdown(wait=False)
                logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        
        try:
            # 2. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Application –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            await application.updater.stop()
            await application.stop()
            await application.shutdown()
            logger.info("‚úÖ Application –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Application: {e}")
        
        try:
            # 3. –ó–∞–∫—Ä—ã–≤–∞–µ–º –ë–î
            await db_manager.close()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: {e}")
            
        logger.info("üîª –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    try:
        asyncio.run(run_bot())
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)