"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""

import logging
from telegram.ext import Application
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from config.settings import TOKEN, OWNER_ID, DATABASE_URL
from database.connection import db_manager  # FIXED: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from bot.handlers.common import register_common_handlers
from bot.handlers.workflow import register_workflow_handlers, create_rejection_conversation
from bot.handlers.approval import register_approval_handlers
from bot.handlers.analytics import register_analytics_handlers
from bot.handlers.admin import register_admin_handlers, create_admin_management_conversation, create_db_restore_conversation, create_hr_date_conversation
from bot.handlers.auth_new import register_new_auth_handlers
from bot.conversations.report_flow import create_report_conversation
from bot.conversations.roster_flow import create_roster_conversation

logger = logging.getLogger(__name__)

async def run_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    logger.info("=" * 50)
    logger.info("üöÄ –ë–û–¢ –ó–ê–ü–£–°–ö–ê–ï–¢–°–Ø...")
    logger.info(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DATABASE_URL.split('@')[1] if '@' in DATABASE_URL else '–ª–æ–∫–∞–ª—å–Ω–∞—è'}")
    logger.info(f"üëë Owner ID: {OWNER_ID}")
    logger.info("=" * 50)

    builder = Application.builder().token(TOKEN)
    application = builder.build()

    async def post_init(app: Application) -> None:
        await db_manager.initialize()  # FIXED: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        logger.info("‚úÖ Database –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        scheduler = AsyncIOScheduler(timezone='Asia/Tashkent')
        from services.notification_service import NotificationService
        scheduler.add_job(NotificationService.process_scheduled_notifications, 'cron', hour=8, minute=0, args=[app])
        scheduler.add_job(NotificationService.send_pending_report_reminders, 'cron', hour=10, minute=0, args=[app.bot])
        
        app.bot_data["scheduler"] = scheduler
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω.")

    async def post_stop(app: Application) -> None:
        if "scheduler" in app.bot_data:
            app.bot_data["scheduler"].shutdown()
        await db_manager.close()
        logger.info("‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è handlers
    register_common_handlers(application)
    register_workflow_handlers(application)
    register_approval_handlers(application)
    register_analytics_handlers(application)
    register_admin_handlers(application)
    register_new_auth_handlers(application)
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è conversations
    application.add_handler(create_report_conversation())
    application.add_handler(create_roster_conversation())
    application.add_handler(create_rejection_conversation())
    application.add_handler(create_admin_management_conversation())
    application.add_handler(create_db_restore_conversation())
    application.add_handler(create_hr_date_conversation())
    logger.info("‚úÖ –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    application.post_init = post_init
    application.post_stop = post_stop
    
    logger.info("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    # –ö–õ–Æ–ß–ï–í–û–ô –ú–û–ú–ï–ù–¢: –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ await
    await application.run_polling(drop_pending_updates=True)