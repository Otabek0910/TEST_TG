# bot/handlers/admin.py

import logging
import os
from datetime import date
from typing import Dict, Any, List, Optional
import pandas as pd
from sqlalchemy import create_engine, text

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, CallbackQueryHandler, MessageHandler, filters, CommandHandler
# –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤:
from telegram.ext import ConversationHandler
from utils.constants import AWAITING_NEW_DISCIPLINE, AWAITING_NEW_LEVEL, AWAITING_RESTORE_FILE, GETTING_HR_DATE, SELECTING_OVERVIEW_ACTION, AWAITING_OVERVIEW_DATE, GETTING_HR_DATE


from bot.middleware.security import check_user_role
from utils.chat_utils import auto_clean
from utils.localization import get_user_language, get_text
from config.settings import OWNER_ID, DATABASE_URL
from database.queries import db_query, db_execute
from services.user_management_service import UserManagementService

logger = logging.getLogger(__name__)

TEMP_DIR = 'temp_files'
os.makedirs(TEMP_DIR, exist_ok=True)


async def manage_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞)"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    user_role = check_user_role(user_id)
    lang = await get_user_language(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not (user_role.get('isAdmin') or user_role.get('isManager')):
        await query.edit_message_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π.")
        return

    keyboard = [
        [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="manage_users")],
        [InlineKeyboardButton("üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏", callback_data="manage_directories")],
    ]

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    if user_role.get('isAdmin'):
        keyboard.append([InlineKeyboardButton("üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞–º–∏", callback_data="admin_report_menu_start")])

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
    if user_id == OWNER_ID:
        keyboard.append([InlineKeyboardButton("üóÑÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏", callback_data="manage_db")])

    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")])

    await query.edit_message_text(
        text="‚öôÔ∏è **–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è**",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )


async def manage_users_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –ø–æ —Ä–æ–ª—è–º (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞)"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    user_role = check_user_role(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not (user_role.get('isAdmin') or user_role.get('isManager')):
        await query.edit_message_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.")
        return

    try:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º
        counts = {}
        
        # CHANGED: –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ –Ω–æ–≤—É—é —Å—Ö–µ–º—É —Å –Ω–æ–≤—ã–º–∏ —Ä–æ–ª—è–º–∏
        role_tables = {
            'admins': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã',
            'managers': '–ú–µ–Ω–µ–¥–∂–µ—Ä—ã', 
            'supervisors': '–°—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä—ã',
            'masters': '–ú–∞—Å—Ç–µ—Ä–∞',
            'brigades': '–ë—Ä–∏–≥–∞–¥–∏—Ä—ã',
            'pto': '–ü–¢–û',
            'kiok': '–ö–ò–û–ö'
        }
        
        for table_name, display_name in role_tables.items():
            try:
                result = db_query(f"SELECT COUNT(*) FROM {table_name}")
                counts[table_name] = result[0][0] if result else 0
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}: {e}")
                counts[table_name] = 0
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–≤–æ–¥–∫–∏
        summary_lines = [
            "üìä **–°–≤–æ–¥–∫–∞ –ø–æ —Ä–æ–ª—è–º:**",
            f"  ‚ñ™Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: **{counts['admins']}**",
            f"  ‚ñ™Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä—ã: **{counts['managers']}**",
            f"  ‚ñ™Ô∏è –°—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä—ã: **{counts['supervisors']}**",
            f"  ‚ñ™Ô∏è –ú–∞—Å—Ç–µ—Ä–∞: **{counts['masters']}**",
            f"  ‚ñ™Ô∏è –ë—Ä–∏–≥–∞–¥–∏—Ä—ã: **{counts['brigades']}**",
            f"  ‚ñ™Ô∏è –ü–¢–û: **{counts['pto']}**",
            f"  ‚ñ™Ô∏è –ö–ò–û–ö: **{counts['kiok']}**",
            "",
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞:"
        ]
        
        summary_text = "\n".join(summary_lines)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", callback_data="list_users_admins_1")],
            [InlineKeyboardButton("üíº –ú–µ–Ω–µ–¥–∂–µ—Ä—ã", callback_data="list_users_managers_1")],
            [InlineKeyboardButton("üë®‚Äçüîß –°—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä—ã", callback_data="list_users_supervisors_1")],
            [InlineKeyboardButton("üî® –ú–∞—Å—Ç–µ—Ä–∞", callback_data="list_users_masters_1")],
            [InlineKeyboardButton("üë∑ –ë—Ä–∏–≥–∞–¥–∏—Ä—ã", callback_data="list_users_brigades_1")],
            [InlineKeyboardButton("üõ†Ô∏è –ü–¢–û", callback_data="list_users_pto_1")],
            [InlineKeyboardButton("‚úÖ –ö–ò–û–ö", callback_data="list_users_kiok_1")],
            [InlineKeyboardButton("üìã –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="export_all_users")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="manage_menu")]
        ]
        
        await query.edit_message_text(
            text=summary_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ manage_users_menu: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.")


async def manage_db_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)"""
    query = update.callback_query
    await query.answer()

    user_id = str(query.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)
    if user_id != OWNER_ID:
        await query.edit_message_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¥–∞–Ω–Ω—ã–º–∏ –∏–º–µ–µ—Ç —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞.")
        return

    keyboard = [
        [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î", callback_data="db_backup_download")],
        [InlineKeyboardButton("üì§ –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –ë–î (2 —Ñ–∞–π–ª–∞)", callback_data="export_full_db")],
        [InlineKeyboardButton("üìã –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="export_all_users")],
        [InlineKeyboardButton("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î", callback_data="db_backup_upload_prompt")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="manage_menu")],
    ]
    
    text = (
        "üóÑÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏**\n\n"
        "**–í–ù–ò–ú–ê–ù–ò–ï:** –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î –≤–ª–∏—è—é—Ç –Ω–∞ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã.\n\n"
        "üì• **–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è** - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±—ç–∫–∞–ø –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è\n"
        "üì§ **–ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç** - —Å—ã—Ä—ã–µ + —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
        "üîÑ **–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ** - –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –ë–î –∏–∑ —Ñ–∞–π–ª–∞"
    )
    
    await query.edit_message_text(
        text, 
        reply_markup=InlineKeyboardMarkup(keyboard), 
        parse_mode=ParseMode.MARKDOWN
    )


async def manage_directories_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏"""
    query = update.callback_query
    await query.answer()

    user_id = str(query.from_user.id)
    user_role = check_user_role(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not user_role.get('isAdmin'):
        await query.edit_message_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏.")
        return

    keyboard = [
        [InlineKeyboardButton("üìÑ –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω (Excel)", callback_data="get_directories_template_button")],
        [InlineKeyboardButton("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤", callback_data="view_directories_info")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="manage_menu")]
    ]
    
    caption = (
        "üìÇ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏**\n\n"
        "**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n"
        "1. **–°–∫–∞—á–∞–π—Ç–µ —à–∞–±–ª–æ–Ω** –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n"
        "2. **–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ** —Ñ–∞–π–ª (–¥–æ–±–∞–≤—å—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏)\n"
        "3. **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª** –æ–±—Ä–∞—Ç–Ω–æ –±–æ—Ç—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π\n\n"
        "üí° –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π Excel —Ñ–∞–π–ª"
    )

    await query.edit_message_text(
        text=caption,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )


async def view_directories_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞—Ö"""
    query = update.callback_query
    await query.answer()

    try:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞—Ö
        disciplines_count = db_query("SELECT COUNT(*) FROM disciplines")[0][0]
        objects_count = db_query("SELECT COUNT(*) FROM construction_objects")[0][0]
        work_types_count = db_query("SELECT COUNT(*) FROM work_types")[0][0]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ
        recent_disciplines = db_query("SELECT name FROM disciplines ORDER BY created_at DESC LIMIT 3")
        recent_objects = db_query("SELECT name FROM construction_objects ORDER BY created_at DESC LIMIT 3")
        
        info_lines = [
            "üìä **–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤:**",
            f"  ‚ñ™Ô∏è –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã: **{disciplines_count}** –∑–∞–ø–∏—Å–µ–π",
            f"  ‚ñ™Ô∏è –ö–æ—Ä–ø—É—Å–∞: **{objects_count}** –∑–∞–ø–∏—Å–µ–π", 
            f"  ‚ñ™Ô∏è –í–∏–¥—ã —Ä–∞–±–æ—Ç: **{work_types_count}** –∑–∞–ø–∏—Å–µ–π",
            ""
        ]
        
        if recent_disciplines:
            info_lines.append("üÜï **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:**")
            for disc in recent_disciplines:
                info_lines.append(f"  ‚Ä¢ {disc[0]}")
            info_lines.append("")
        
        if recent_objects:
            info_lines.append("üÜï **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ—Ä–ø—É—Å–∞:**")
            for obj in recent_objects:
                info_lines.append(f"  ‚Ä¢ {obj[0]}")
        
        info_text = "\n".join(info_lines)
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º", callback_data="manage_directories")]]
        
        await query.edit_message_text(
            text=info_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞—Ö: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞—Ö.")


async def show_user_edit_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞)"""
    query = update.callback_query
    await query.answer()

    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    parts = query.data.split('_')
    if len(parts) < 4:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
        
    role = parts[2]  # edit_user_[role]_[user_id]
    user_id_to_edit = parts[3]

    viewer_id = str(query.from_user.id)
    viewer_role = check_user_role(viewer_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not (viewer_role.get('isAdmin') or viewer_role.get('isManager')):
        await query.edit_message_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = db_query(f"SELECT first_name, last_name FROM {role} WHERE user_id = %s", (user_id_to_edit,))
        
        if not user_data:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
            
        full_name = f"{user_data[0][0]} {user_data[0][1]}" if user_data[0][0] and user_data[0][1] else user_id_to_edit

        message_text = f"üë§ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {full_name}**\n`{user_id_to_edit}`\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        keyboard_buttons = []
        
        # –û–ø—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if role == 'managers':
            keyboard_buttons.append([InlineKeyboardButton("üìä –ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data=f"change_level_{user_id_to_edit}")])
            keyboard_buttons.append([InlineKeyboardButton("üè≠ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É", callback_data=f"change_discipline_{role}_{user_id_to_edit}")])
        elif role in ['pto', 'kiok', 'supervisors', 'masters']:
            keyboard_buttons.append([InlineKeyboardButton("üè≠ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É", callback_data=f"change_discipline_{role}_{user_id_to_edit}")])
        elif role == 'brigades':
            keyboard_buttons.append([InlineKeyboardButton("üè≠ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É", callback_data=f"change_discipline_{role}_{user_id_to_edit}")])
            
            # –°–±—Ä–æ—Å —Ç–∞–±–µ–ª—è –¥–ª—è –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤, –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ 2 —É—Ä–æ–≤–Ω—è –∏ –ü–¢–û)
            if viewer_role.get('isAdmin') or viewer_role.get('managerLevel') == 2 or viewer_role.get('isPto'):
                keyboard_buttons.append([InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ç–∞–±–µ–ª—å", callback_data=f"reset_roster_{user_id_to_edit}")])

        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤, –∏—Å–∫–ª—é—á–∞—è —Å–µ–±—è –∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞)
        if (viewer_role.get('isAdmin') and 
            viewer_id != user_id_to_edit and 
            user_id_to_edit != OWNER_ID):
            keyboard_buttons.append([InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"delete_user_{role}_{user_id_to_edit}")])
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        keyboard_buttons.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"list_users_{role}_1")])

        await query.edit_message_text(
            text=message_text,
            reply_markup=InlineKeyboardMarkup(keyboard_buttons),
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_user_edit_menu: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    query = update.callback_query
    await query.answer()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data: list_users_[—Ä–æ–ª—å]_[—Å—Ç—Ä–∞–Ω–∏—Ü–∞]
    parts = query.data.split('_')
    if len(parts) < 4:
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    role = parts[2]
    page = int(parts[3])
    
    user_id = str(query.from_user.id)
    user_role = check_user_role(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not (user_role.get('isAdmin') or user_role.get('isManager')):
        await query.edit_message_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    await UserManagementService.list_users_with_pagination(query, role, page)


async def download_db_backup(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø –ë–î –≤ Excel"""
    query = update.callback_query
    await query.answer()
    
    if str(query.from_user.id) != OWNER_ID:
        await query.edit_message_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∫ –±—ç–∫–∞–ø—É –ë–î –∏–º–µ–µ—Ç —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞.")
        return

    await query.edit_message_text("‚è≥ –§–æ—Ä–º–∏—Ä—É—é –ø–æ–ª–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
    
    file_path = os.path.join(TEMP_DIR, f"full_backup_{date.today()}.xlsx")
    
    try:
        # –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –±—ç–∫–∞–ø–∞
        table_names = [
            'disciplines', 'construction_objects', 'work_types', 'admins', 'managers', 
            'supervisors', 'masters', 'brigades', 'pto', 'kiok', 'reports', 'topic_mappings', 
            'personnel_roles', 'daily_rosters', 'daily_roster_details'
        ]
        
        engine = create_engine(DATABASE_URL)
        with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
            with engine.connect() as connection:
                for table_name in table_names:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                    query_check_table = text("SELECT EXISTS (SELECT FROM pg_tables WHERE schemaname = 'public' AND tablename  = :table_name)")
                    if connection.execute(query_check_table, {'table_name': table_name}).scalar():
                        df = pd.read_sql_query(text(f"SELECT * FROM {table_name}"), connection)
                        
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ø–æ–ª–µ–π —Å –¥–∞—Ç–∞–º–∏/–≤—Ä–µ–º–µ–Ω–µ–º
                        if table_name == 'reports':
                            timezone_cols = ['timestamp', 'kiok_approval_timestamp']
                            for col in timezone_cols:
                                if col in df.columns and pd.api.types.is_datetime64_any_dtype(df[col]):
                                    if df[col].dt.tz is not None:
                                        df[col] = df[col].dt.tz_localize(None)
                        
                        df.to_excel(writer, sheet_name=table_name, index=False)
                    else:
                        logger.warning(f"–¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î, –ø—Ä–æ–ø—É—â–µ–Ω–∞ –≤ –±—ç–∫–∞–ø–µ.")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤–ª–∞–¥–µ–ª—å—Ü—É
        await context.bot.send_document(
            chat_id=OWNER_ID,
            document=open(file_path, 'rb'),
            caption="‚úÖ –ü–æ–ª–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."
        )
        await query.delete_message()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {e}")
        await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {str(e)}")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(file_path):
            os.remove(file_path)


async def export_all_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Excel"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    if user_id != OWNER_ID and not (check_user_role(user_id).get('isAdmin')):
        await query.edit_message_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    await query.edit_message_text("üë• –°–æ–±–∏—Ä–∞—é –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫...")
    file_path = os.path.join(TEMP_DIR, f"all_users_{date.today()}.xlsx")

    try:
        engine = create_engine(DATABASE_URL)
        all_users_df = pd.DataFrame()
        roles = ['admins', 'managers', 'supervisors', 'masters', 'brigades', 'pto', 'kiok']
        
        with engine.connect() as connection:
            for role in roles:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                query_check_table = text("SELECT EXISTS (SELECT FROM pg_tables WHERE schemaname = 'public' AND tablename = :table_name)")
                if connection.execute(query_check_table, {'table_name': role}).scalar():
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ –ø–æ–ª—è –¥–ª—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
                    df = pd.read_sql_query(text(f"SELECT user_id, first_name, last_name, username, phone_number FROM {role}"), connection)
                    df['role'] = role
                    all_users_df = pd.concat([all_users_df, df], ignore_index=True)

        all_users_df.to_excel(file_path, index=False)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await context.bot.send_document(
            chat_id=query.message.chat_id,
            document=open(file_path, 'rb'),
            caption="‚úÖ –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )
        await query.delete_message()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(file_path):
            os.remove(file_path)


async def db_backup_upload_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±—ç–∫–∞–ø–∞ –ë–î"""
    query = update.callback_query
    await query.answer()
    
    if str(query.from_user.id) != OWNER_ID:
        await query.edit_message_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –ë–î –∏–º–µ–µ—Ç —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞.")
        return
    
    text = (
        "üîÑ **–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö**\n\n"
        "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï! –≠–¢–û –û–ü–ê–°–ù–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø!**\n"
        "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ.\n\n"
        "**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª —Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–µ–π\n"
        "2. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è\n\n"
        "‚ùó **–í—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∏ –∑–∞–º–µ–Ω–µ–Ω—ã**"
    )
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="manage_db")]]
    
    await query.edit_message_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
    context.user_data['awaiting_db_backup'] = True


def register_admin_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    from telegram.ext import CallbackQueryHandler
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    application.add_handler(CallbackQueryHandler(manage_menu, pattern="^manage_menu$"))
    application.add_handler(CallbackQueryHandler(manage_users_menu, pattern="^manage_users$"))
    application.add_handler(CallbackQueryHandler(manage_db_menu, pattern="^manage_db$"))
    application.add_handler(CallbackQueryHandler(manage_directories_menu, pattern="^manage_directories$"))
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞—Ö
    application.add_handler(CallbackQueryHandler(view_directories_info, pattern="^view_directories_info$"))
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    application.add_handler(CallbackQueryHandler(show_user_edit_menu, pattern="^edit_user_"))
     
    # –≠–∫—Å–ø–æ—Ä—Ç –∏ –±—ç–∫–∞–ø
    application.add_handler(CallbackQueryHandler(download_db_backup, pattern="^db_backup_download$"))
    application.add_handler(CallbackQueryHandler(export_all_users, pattern="^export_all_users$"))
    application.add_handler(CallbackQueryHandler(db_backup_upload_prompt, pattern="^db_backup_upload_prompt$"))
    
    
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏:
    # - list_users (–ø–æ–∫–∞–∑ —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)
    # - delete_user (—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    # - change_discipline (—Å–º–µ–Ω–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã)
    # - change_level (—Å–º–µ–Ω–∞ —É—Ä–æ–≤–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞)
    # - reset_roster (—Å–±—Ä–æ—Å —Ç–∞–±–µ–ª—è)
    
    logger.info("‚úÖ Admin handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


async def delete_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –µ–≥–æ –æ–± —ç—Ç–æ–º"""
    query = update.callback_query
    await query.answer("–£–¥–∞–ª—è—é...", show_alert=False)
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data: delete_user_[—Ä–æ–ª—å]_[user_id]
    parts = query.data.split('_')
    if len(parts) < 4:
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    role_to_delete = parts[2]
    user_id_to_delete = parts[3]
    
    admin_id = str(query.from_user.id)
    admin_role = check_user_role(admin_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
    if not admin_role.get('isAdmin'):
        await query.edit_message_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if admin_id == user_id_to_delete or user_id_to_delete == OWNER_ID:
        await query.edit_message_text("‚õîÔ∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    success = await UserManagementService.delete_user(role_to_delete, user_id_to_delete)
    
    if success:
        # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            if int(user_id_to_delete) in context._application.user_data:
                context._application.user_data[int(user_id_to_delete)].clear()
                logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_delete} –±—ã–ª–æ —Å–±—Ä–æ—à–µ–Ω–æ.")
            
            greeting_text = "‚ö†Ô∏è –í–∞—à–∞ —Ä–æ–ª—å –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=int(user_id_to_delete),
                text=greeting_text,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîë –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", callback_data="start_auth")
                ]])
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_delete} –æ–± —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"list_users_{role_to_delete}_1")]]
        await query.edit_message_text(
            text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{user_id_to_delete}` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_user_{role_to_delete}_{user_id_to_delete}")]]
        await query.edit_message_text(
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )


async def confirm_reset_roster(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —Å–±—Ä–æ—Å —Ç–∞–±–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data: reset_roster_[user_id]
    parts = query.data.split('_')
    if len(parts) < 3:
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ç–∞–±–µ–ª—è.")
        return
    
    user_id_to_reset = parts[2]
    
    admin_id = str(query.from_user.id)
    admin_role = check_user_role(admin_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not (admin_role.get('isAdmin') or admin_role.get('managerLevel') == 2 or admin_role.get('isPto')):
        await query.edit_message_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ç–∞–±–µ–ª—è.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_data = db_query("SELECT first_name, last_name FROM brigades WHERE user_id = %s", (user_id_to_reset,))
    if not user_data:
        await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±—Ä–∏–≥–∞–¥–∏—Ä–æ–º.")
        return
    
    first_name = user_data[0][0] or ""
    last_name = user_data[0][1] or ""
    full_name = f"{first_name} {last_name}".strip() or user_id_to_reset
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    text = (
        f"‚ÄºÔ∏è **–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Ç–∞–±–µ–ª—å –¥–ª—è –±—Ä–∏–≥–∞–¥–∏—Ä–∞ {full_name}?**\n\n"
        f"–û–Ω —Å–º–æ–∂–µ—Ç –ø–æ–¥–∞—Ç—å –µ–≥–æ –∑–∞–Ω–æ–≤–æ. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ."
    )
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data=f"execute_reset_roster_{user_id_to_reset}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_user_brigades_{user_id_to_reset}")]
    ]
    
    await query.edit_message_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )


async def execute_reset_roster(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–±—Ä–æ—Å —Ç–∞–±–µ–ª—è –¥–ª—è –±—Ä–∏–≥–∞–¥–∏—Ä–∞"""
    query = update.callback_query
    await query.answer("–°–±—Ä–∞—Å—ã–≤–∞—é —Ç–∞–±–µ–ª—å...")
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data: execute_reset_roster_[user_id]
    parts = query.data.split('_')
    if len(parts) < 4:
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ç–∞–±–µ–ª—è.")
        return
    
    user_id_to_reset = parts[3]
    
    admin_id = str(query.from_user.id)
    admin_role = check_user_role(admin_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not (admin_role.get('isAdmin') or admin_role.get('managerLevel') == 2 or admin_role.get('isPto')):
        await query.edit_message_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ç–∞–±–µ–ª—è.")
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–±–µ–ª—å
    success = await UserManagementService.reset_roster(user_id_to_reset)
    
    if success:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            greeting_text = "‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–±—Ä–æ—Å–∏–ª –≤–∞—à —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Ç–∞–±–µ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–∞–π—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=int(user_id_to_reset),
                text=greeting_text,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üìã –ü–æ–¥–∞—Ç—å —Ç–∞–±–µ–ª—å", callback_data="submit_roster")
                ]])
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_reset} –æ —Å–±—Ä–æ—Å–µ —Ç–∞–±–µ–ª—è: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_user_brigades_{user_id_to_reset}")]]
        await query.edit_message_text(
            text="‚úÖ –¢–∞–±–µ–ª—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_user_brigades_{user_id_to_reset}")]]
        await query.edit_message_text(
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ç–∞–±–µ–ª—è.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )


async def show_discipline_change_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —Å–º–µ–Ω—ã –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: change_discipline_[role]_[user_id]
    parts = query.data.split('_')
    if len(parts) < 4:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö.")
        return ConversationHandler.END
    
    role = parts[2]
    user_id_to_edit = parts[3]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ context –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    context.user_data['edit_user_role'] = role
    context.user_data['edit_user_id'] = user_id_to_edit
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
    disciplines = db_query("SELECT id, name FROM disciplines ORDER BY name")
    if not disciplines:
        await query.edit_message_text("‚ùå –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ConversationHandler.END
    
    keyboard_buttons = []
    for disc_id, disc_name in disciplines:
        keyboard_buttons.append([InlineKeyboardButton(
            disc_name, 
            callback_data=f"set_new_discipline_{disc_id}"
        )])
    
    keyboard_buttons.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin_op")])
    
    await query.edit_message_text(
        f"üè≠ **–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**",
        reply_markup=InlineKeyboardMarkup(keyboard_buttons),
        parse_mode=ParseMode.MARKDOWN
    )
    
    return AWAITING_NEW_DISCIPLINE


async def handle_discipline_change(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–º–µ–Ω—É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã"""
    query = update.callback_query
    await query.answer("–ò–∑–º–µ–Ω—è—é –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É...")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –∏–∑ callback
    new_discipline_id = query.data.replace('set_new_discipline_', '')
    role = context.user_data.get('edit_user_role')
    user_id_to_edit = context.user_data.get('edit_user_id')
    
    if not role or not user_id_to_edit:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Ç–µ—Ä—è–Ω—ã.")
        return ConversationHandler.END
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –≤ –ë–î
    success = db_execute(
        f"UPDATE {role} SET discipline_id = %s WHERE user_id = %s",
        (new_discipline_id, user_id_to_edit)
    )
    
    if success:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        disc_name_raw = db_query("SELECT name FROM disciplines WHERE id = %s", (new_discipline_id,))
        disc_name = disc_name_raw[0][0] if disc_name_raw else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await context.bot.send_message(
                chat_id=int(user_id_to_edit),
                text=f"‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª –≤–∞—à—É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –Ω–∞ ¬´{disc_name}¬ª.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")
                ]])
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_edit}: {e}")
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_user_{role}_{user_id_to_edit}")]]
        await query.edit_message_text(
            f"‚úÖ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ¬´{disc_name}¬ª.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_user_{role}_{user_id_to_edit}")]]
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    context.user_data.clear()
    return ConversationHandler.END

# 2. –°–ú–ï–ù–ê –£–†–û–í–ù–Ø –ú–ï–ù–ï–î–ñ–ï–†–ê

async def show_level_change_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —Å–º–µ–Ω—ã —É—Ä–æ–≤–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: change_level_[user_id]
    user_id_to_edit = query.data.replace('change_level_', '')
    context.user_data['edit_user_id'] = user_id_to_edit
    
    keyboard = [
        [InlineKeyboardButton("–£—Ä–æ–≤–µ–Ω—å 1 (–≤—Å–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã)", callback_data="set_new_level_1")],
        [InlineKeyboardButton("–£—Ä–æ–≤–µ–Ω—å 2 (–æ–¥–Ω–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞)", callback_data="set_new_level_2")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin_op")]
    ]
    
    await query.edit_message_text(
        "üìä **–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:**",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    
    return AWAITING_NEW_LEVEL

  
async def handle_level_change(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–º–µ–Ω—É —É—Ä–æ–≤–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    query = update.callback_query
    await query.answer("–ò–∑–º–µ–Ω—è—é —É—Ä–æ–≤–µ–Ω—å...")
    
    new_level = int(query.data.replace('set_new_level_', ''))
    user_id_to_edit = context.user_data.get('edit_user_id')
    
    if not user_id_to_edit:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Ç–µ—Ä—è–Ω—ã.")
        return ConversationHandler.END
    
    # –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å 1, —É–±–∏—Ä–∞–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ
    if new_level == 1:
        success = db_execute(
            "UPDATE managers SET level = %s, discipline = NULL WHERE user_id = %s",
            (new_level, user_id_to_edit)
        )
        
        if success:
            try:
                await context.bot.send_message(
                    chat_id=int(user_id_to_edit),
                    text="‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–∏—Å–≤–æ–∏–ª –≤–∞–º –£—Ä–æ–≤–µ–Ω—å 1. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")
                    ]])
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_edit}: {e}")
            
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_user_managers_{user_id_to_edit}")]]
            await query.edit_message_text(
                "‚úÖ –£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 1 (–¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º).",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            context.user_data.clear()
            return ConversationHandler.END
    
    # –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å 2, –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É
    else:
        context.user_data['new_level'] = new_level
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
        disciplines = db_query("SELECT id, name FROM disciplines ORDER BY name")
        if not disciplines:
            await query.edit_message_text("‚ùå –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return ConversationHandler.END
        
        keyboard_buttons = []
        for disc_id, disc_name in disciplines:
            keyboard_buttons.append([InlineKeyboardButton(
                disc_name, 
                callback_data=f"set_level2_discipline_{disc_id}"
            )])
        
        keyboard_buttons.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin_op")])
        
        await query.edit_message_text(
            f"üè≠ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è –£—Ä–æ–≤–Ω—è 2:**",
            reply_markup=InlineKeyboardMarkup(keyboard_buttons),
            parse_mode=ParseMode.MARKDOWN
        )
        
        return AWAITING_NEW_DISCIPLINE


async def handle_level2_discipline(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –¥–ª—è —É—Ä–æ–≤–Ω—è 2"""
    query = update.callback_query
    await query.answer("–°–æ—Ö—Ä–∞–Ω—è—é –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
    
    discipline_id = query.data.replace('set_level2_discipline_', '')
    user_id_to_edit = context.user_data.get('edit_user_id')
    new_level = context.user_data.get('new_level')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É
    success = db_execute(
        "UPDATE managers SET level = %s, discipline = %s WHERE user_id = %s",
        (new_level, discipline_id, user_id_to_edit)
    )
    
    if success:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
        disc_name_raw = db_query("SELECT name FROM disciplines WHERE id = %s", (discipline_id,))
        disc_name = disc_name_raw[0][0] if disc_name_raw else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        try:
            await context.bot.send_message(
                chat_id=int(user_id_to_edit),
                text=f"‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–∏—Å–≤–æ–∏–ª –≤–∞–º –£—Ä–æ–≤–µ–Ω—å 2 –∏ –Ω–∞–∑–Ω–∞—á–∏–ª –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É ¬´{disc_name}¬ª.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")
                ]])
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_edit}: {e}")
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_user_managers_{user_id_to_edit}")]]
        await query.edit_message_text(
            f"‚úÖ –ü—Ä–∏—Å–≤–æ–µ–Ω –£—Ä–æ–≤–µ–Ω—å 2 —Å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–æ–π ¬´{disc_name}¬ª.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_user_managers_{user_id_to_edit}")]]
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    context.user_data.clear()
    return ConversationHandler.END

# 3. –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ë–î

async def handle_db_restore_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î"""
    
    user_id = str(update.effective_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)
    if user_id != OWNER_ID:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –ë–î –∏–º–µ–µ—Ç —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞.")
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    excel_mime_type = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    if not update.message.document or update.message.document.mime_type != excel_mime_type:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª (.xlsx)")
        return AWAITING_RESTORE_FILE
    
    await update.message.reply_text("‚è≥ –ù–∞—á–∏–Ω–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
    
    try:
        from services.import_service import ImportService
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await context.bot.get_file(update.message.document.file_id)
        file_path = os.path.join(TEMP_DIR, f"restore_{user_id}.xlsx")
        await file.download_to_drive(file_path)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ë–î
        success = ImportService.restore_database_from_excel(file_path)
        
        if success:
            await update.message.reply_text(
                "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏!",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")
                ]])
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ë–î. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏.")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(file_path):
            os.remove(file_path)
    
    return ConversationHandler.END

# 4. –û–¢–ú–ï–ù–ê –û–ü–ï–†–ê–¶–ò–ô

async def cancel_admin_operation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –∞–¥–º–∏–Ω—Å–∫—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    context.user_data.clear()
    return ConversationHandler.END

# === CONVERSATIONHANDLER'–´ ===

def create_admin_management_conversation():
    """–°–æ–∑–¥–∞–µ—Ç ConversationHandler –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    from telegram.ext import ConversationHandler, CallbackQueryHandler
    from utils.constants import AWAITING_NEW_DISCIPLINE, AWAITING_NEW_LEVEL
    
    return ConversationHandler(
        entry_points=[
            CallbackQueryHandler(show_discipline_change_menu, pattern="^change_discipline_"),
            CallbackQueryHandler(show_level_change_menu, pattern="^change_level_"),
        ],
        states={
            AWAITING_NEW_DISCIPLINE: [
                CallbackQueryHandler(handle_discipline_change, pattern="^set_new_discipline_"),
                CallbackQueryHandler(handle_level2_discipline, pattern="^set_level2_discipline_"),
            ],
            AWAITING_NEW_LEVEL: [
                CallbackQueryHandler(handle_level_change, pattern="^set_new_level_"),
            ]
        },
        fallbacks=[
            CallbackQueryHandler(cancel_admin_operation, pattern="^cancel_admin_op$"),
        ],
        per_user=True,
       
        allow_reentry=True
    )

def create_db_restore_conversation():
    """–°–æ–∑–¥–∞–µ—Ç ConversationHandler –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î"""
    from telegram.ext import ConversationHandler, MessageHandler, filters
    from utils.constants import AWAITING_RESTORE_FILE
    
    return ConversationHandler(
        entry_points=[
            CallbackQueryHandler(db_backup_upload_prompt, pattern="^db_backup_upload_prompt$")
        ],
        states={
            AWAITING_RESTORE_FILE: [
                MessageHandler(
                    filters.Document.MimeType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"), 
                    handle_db_restore_file
                )
            ]
        },
        fallbacks=[
            CallbackQueryHandler(cancel_admin_operation, pattern="^cancel_admin_op$"),
        ],
        per_user=True,
        
        allow_reentry=True
    )

def create_hr_date_conversation():
    """–°–æ–∑–¥–∞–µ—Ç ConversationHandler –¥–ª—è HR –æ—Ç—á–µ—Ç–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã"""
    from telegram.ext import ConversationHandler, MessageHandler, filters, CallbackQueryHandler
    from utils.constants import GETTING_HR_DATE
    
    return ConversationHandler(
        entry_points=[
            CallbackQueryHandler(show_hr_menu, pattern="^hr_date_select_"),
        ],
        states={
            GETTING_HR_DATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_hr_date)
            ]
        },
        fallbacks=[
            CallbackQueryHandler(cancel_admin_operation, pattern="^cancel_admin_op$"),
        ],
        per_user=True,
        allow_reentry=True
    )

async def show_hr_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é HR –æ—Ç—á–µ—Ç–æ–≤"""
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ analytics
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üöß HR –æ—Ç—á–µ—Ç—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

async def process_hr_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—É –¥–ª—è HR –æ—Ç—á–µ—Ç–∞"""
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
    await update.message.reply_text("üöß –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    return ConversationHandler.END


def register_admin_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    application.add_handler(CallbackQueryHandler(manage_menu, pattern="^manage_menu$"))
    application.add_handler(CallbackQueryHandler(manage_users_menu, pattern="^manage_users$"))
    application.add_handler(CallbackQueryHandler(manage_db_menu, pattern="^manage_db$"))
    application.add_handler(CallbackQueryHandler(manage_directories_menu, pattern="^manage_directories$"))
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞—Ö
    application.add_handler(CallbackQueryHandler(view_directories_info, pattern="^view_directories_info$"))
    
    # –°–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    application.add_handler(CallbackQueryHandler(list_users, pattern="^list_users_"))
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    application.add_handler(CallbackQueryHandler(show_user_edit_menu, pattern="^edit_user_"))
    application.add_handler(CallbackQueryHandler(delete_user, pattern="^delete_user_"))
    
    # –°–±—Ä–æ—Å —Ç–∞–±–µ–ª—è
    application.add_handler(CallbackQueryHandler(confirm_reset_roster, pattern="^reset_roster_"))
    application.add_handler(CallbackQueryHandler(execute_reset_roster, pattern="^execute_reset_roster_"))
    
    # –≠–∫—Å–ø–æ—Ä—Ç –∏ –±—ç–∫–∞–ø
    application.add_handler(CallbackQueryHandler(download_db_backup, pattern="^db_backup_download$"))
    application.add_handler(CallbackQueryHandler(export_all_users, pattern="^export_all_users$"))
    
    logger.info("‚úÖ Admin handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
