# bot/handlers/export.py

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from bot.middleware.security import check_user_role
from services.export_service import ExportService
from utils.chat_utils import auto_clean
from utils.localization import get_user_language, get_text
from config.settings import OWNER_ID

from datetime import date, timedelta
from telegram.constants import ParseMode
import os
import gc

logger = logging.getLogger(__name__)


async def export_reports_to_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤ –≤ Excel (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞)"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    user_role = check_user_role(user_id)
    lang = get_user_language(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not (user_role.get('isAdmin') or user_role.get('isPto') or user_role.get('isKiok') or user_role.get('isManager')):
        await query.edit_message_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤.")
        return
    
    await query.edit_message_text("‚è≥ –§–æ—Ä–º–∏—Ä—É—é —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–∞–º–∏... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        filter_params = {}
        
        # –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω –∏ –Ω–µ –º–µ–Ω–µ–¥–∂–µ—Ä 1 —É—Ä–æ–≤–Ω—è, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ
        if not (user_role.get('isAdmin') or user_role.get('managerLevel') == 1):
            discipline = user_role.get('discipline')
            if discipline:
                filter_params['discipline_name'] = discipline
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        file_path = ExportService.export_reports_to_excel(user_id, filter_params)
        
        if file_path:
            filename = f"–û—Ç—á–µ—Ç—ã_{user_id}_{context.bot_data.get('current_date', 'export')}.xlsx"
            
            with open(file_path, 'rb') as file:
                await context.bot.send_document(
                    chat_id=query.message.chat_id,
                    document=file,
                    filename=filename,
                    caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω"
                )
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            ExportService.cleanup_temp_file(file_path)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
            keyboard = [[InlineKeyboardButton(get_text('back_button', lang), callback_data="report_menu_all")]]
            await query.edit_message_text(
                "‚úÖ –§–∞–π–ª —Å –æ—Ç—á–µ—Ç–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞.")


async def download_db_backup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ –ë–î (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    
    # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Å–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø
    if user_id != OWNER_ID:
        await query.answer("‚õîÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞.", show_alert=True)
        return
    
    await query.edit_message_text("‚è≥ –§–æ—Ä–º–∏—Ä—É—é –ø–æ–ª–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø
        file_path = ExportService.export_full_database_backup(user_id)
        
        if file_path:
            filename = f"–ü–æ–ª–Ω—ã–π_–±—ç–∫–∞–ø_–ë–î_{context.bot_data.get('current_date', 'backup')}.xlsx"
            
            with open(file_path, 'rb') as file:
                await context.bot.send_document(
                    chat_id=query.message.chat_id,
                    document=file,
                    filename=filename,
                    caption="üóÑÔ∏è –ü–æ–ª–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ë–î"
                )
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            ExportService.cleanup_temp_file(file_path)
            
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–î", callback_data="manage_db")]]
            await query.edit_message_text(
                "‚úÖ –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø –ë–î –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞.")

  
async def export_full_db_to_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª–Ω–æ–π –ë–î –≤ Excel —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    
    if user_id != OWNER_ID:
        await query.answer("‚õîÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞.", show_alert=True)
        return
    
    await query.edit_message_text("‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã...")
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—ã—Ä–æ–π –±—ç–∫–∞–ø
        raw_file_path = ExportService.export_full_database_backup(user_id)
        if raw_file_path:
            filename_raw = f"–ü–æ–ª–Ω–∞—è_–≤—ã–≥—Ä—É–∑–∫–∞_–ë–î_raw_{context.bot_data.get('current_date', 'export')}.xlsx"
            with open(raw_file_path, 'rb') as file:
                await context.bot.send_document(
                    chat_id=user_id,
                    document=file,
                    filename=filename_raw,
                    caption="üìä –°—ã—Ä–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ –ë–î (–≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –µ—Å—Ç—å)"
                )
            ExportService.cleanup_temp_file(raw_file_path)
        
        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        formatted_file_path = ExportService.export_formatted_database(user_id)
        if formatted_file_path:
            filename_formatted = f"–ü–æ–ª–Ω–∞—è_–≤—ã–≥—Ä—É–∑–∫–∞_–ë–î_—Ñ–æ—Ä–º–∞—Ç_{context.bot_data.get('current_date', 'export')}.xlsx"
            with open(formatted_file_path, 'rb') as file:
                await context.bot.send_document(
                    chat_id=user_id,
                    document=file,
                    filename=filename_formatted,
                    caption="üìã –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ –ë–î (—á–∏—Ç–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è)"
                )
            ExportService.cleanup_temp_file(formatted_file_path)
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–î", callback_data="manage_db")]]
        await query.edit_message_text(
            "‚úÖ –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã 2 —Ñ–∞–π–ª–∞: —Å—ã—Ä–æ–π –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤.")


async def get_directories_template(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞)"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    user_role = check_user_role(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
    if not user_role.get('isAdmin'):
        await query.edit_message_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏.")
        return
    
    await query.edit_message_text("‚è≥ –§–æ—Ä–º–∏—Ä—É—é —à–∞–±–ª–æ–Ω —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤...")
    
    try:
        file_path = ExportService.generate_directories_template()
        
        if file_path:
            filename = f"–®–∞–±–ª–æ–Ω_—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤_{context.bot_data.get('current_date', 'template')}.xlsx"
            
            with open(file_path, 'rb') as file:
                await context.bot.send_document(
                    chat_id=query.message.chat_id,
                    document=file,
                    filename=filename,
                    caption=(
                        "üìÑ –®–∞–±–ª–æ–Ω —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤\n\n"
                        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
                        "1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ Excel\n"
                        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –æ–±—Ä–∞—Ç–Ω–æ –±–æ—Ç—É\n"
                        "3. –ò–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
                    )
                )
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            ExportService.cleanup_temp_file(file_path)
            
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º", callback_data="manage_directories")]]
            await query.edit_message_text(
                "‚úÖ –®–∞–±–ª–æ–Ω —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞.")


async def export_all_users_to_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Excel (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞)"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    user_role = check_user_role(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
    if not user_role.get('isAdmin'):
        await query.edit_message_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    await query.edit_message_text("‚è≥ –§–æ—Ä–º–∏—Ä—É—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    try:
        from sqlalchemy import create_engine, text
        from config.settings import DATABASE_URL
        import pandas as pd
        import os
        from utils.constants import TEMP_DIR
        
        ExportService.create_temp_directory()
        
        current_date_str = context.bot_data.get('current_date', 'export')
        file_path = os.path.join(TEMP_DIR, f"all_users_{user_id}_{current_date_str}.xlsx")
        
        engine = create_engine(DATABASE_URL)
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü —Ä–æ–ª–µ–π
        user_tables = {
            '–ê–¥–º–∏–Ω—ã': 'SELECT user_id, first_name, last_name, username, phone_number, created_at FROM admins',
            '–ú–µ–Ω–µ–¥–∂–µ—Ä—ã': '''
                SELECT m.user_id, m.first_name, m.last_name, m.username, m.phone_number, 
                       m.level as "–£—Ä–æ–≤–µ–Ω—å", d.name as "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞", m.created_at 
                FROM managers m 
                LEFT JOIN disciplines d ON m.discipline = d.id
            ''',
            '–°—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä—ã': '''
                SELECT s.user_id, s.first_name, s.last_name, s.username, s.phone_number,
                       d.name as "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞", s.created_at
                FROM supervisors s
                LEFT JOIN disciplines d ON s.discipline_id = d.id  
            ''',
            '–ú–∞—Å—Ç–µ—Ä–∞': '''
                SELECT m.user_id, m.first_name, m.last_name, m.username, m.phone_number,
                       d.name as "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞", m.created_at
                FROM masters m
                LEFT JOIN disciplines d ON m.discipline_id = d.id
            ''',
            '–ë—Ä–∏–≥–∞–¥–∏—Ä—ã': '''
                SELECT b.user_id, b.first_name, b.last_name, b.username, b.phone_number,
                       b.brigade_name as "–ë—Ä–∏–≥–∞–¥–∞", d.name as "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞", b.created_at
                FROM brigades b
                LEFT JOIN disciplines d ON b.discipline_id = d.id
            ''',
            '–ü–¢–û': '''
                SELECT p.user_id, p.first_name, p.last_name, p.username, p.phone_number,
                       d.name as "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞", p.created_at
                FROM pto p
                LEFT JOIN disciplines d ON p.discipline_id = d.id
            ''',
            '–ö–ò–û–ö': '''
                SELECT k.user_id, k.first_name, k.last_name, k.username, k.phone_number,
                       k.kiok_name as "–ò–º—è –ö–ò–û–ö", d.name as "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞", k.created_at
                FROM kiok k
                LEFT JOIN disciplines d ON k.discipline_id = d.id
            '''
        }
        
        with pd.ExcelWriter(file_path, engine='xlsxwriter') as writer:
            with engine.connect() as connection:
                for sheet_name, query_text in user_tables.items():
                    try:
                        df = pd.read_sql_query(text(query_text), connection)
                        
                        if not df.empty:
                            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                            rename_map = {
                                'user_id': 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                                'first_name': '–ò–º—è',
                                'last_name': '–§–∞–º–∏–ª–∏—è',
                                'username': 'Username',
                                'phone_number': '–¢–µ–ª–µ—Ñ–æ–Ω',
                                'created_at': '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
                            }
                            df = df.rename(columns=rename_map)
                            
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                            if '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' in df.columns:
                                df['–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'] = pd.to_datetime(df['–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'], errors='coerce')
                                if df['–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'].dt.tz is not None:
                                    df['–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'] = df['–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'].dt.tz_localize(None)
                            
                            df.to_excel(writer, sheet_name=sheet_name, index=False)
                            
                            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
                            worksheet = writer.sheets[sheet_name]
                            for i, col in enumerate(df.columns):
                                if not df[col].empty:
                                    max_len = df[col].astype(str).map(len).max()
                                else:
                                    max_len = 0
                                column_len = max(max_len, len(col)) + 2
                                worksheet.set_column(i, i, min(column_len, 30))
                        
                    except Exception as table_error:
                        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–∞–±–ª–∏—Ü—ã {sheet_name}: {table_error}")
                        continue
        
        filename = f"–í—Å–µ_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏_{current_date_str}.xlsx"
        
        with open(file_path, 'rb') as file:
            await context.bot.send_document(
                chat_id=query.message.chat_id,
                document=file,
                filename=filename,
                caption="üë• –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã"
            )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        ExportService.cleanup_temp_file(file_path)
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="manage_users")]]
        await query.edit_message_text(
            "‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è {user_id}: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@auto_clean
async def handle_db_restore_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
   """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞)"""
   
   user_id = str(update.effective_user.id)
   
   # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)
   if user_id != OWNER_ID:
       await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –ë–î –∏–º–µ–µ—Ç —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞.")
       return
   
   # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
   excel_mime_type = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
   if not update.message.document or update.message.document.mime_type != excel_mime_type:
       await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª (.xlsx)")
       return
   
   # FIXED: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –æ–∂–∏–¥–∞–µ—Ç—Å—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î
   if not context.user_data.get('awaiting_db_backup'):
       return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
   
   # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
   context.user_data.pop('awaiting_db_backup', None)
   
   await update.message.reply_text("‚è≥ –ù–∞—á–∏–Ω–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
   
   try:
       from services.import_service import ImportService
       from utils.constants import TEMP_DIR
       
       # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
       file = await context.bot.get_file(update.message.document.file_id)
       file_path = os.path.join(TEMP_DIR, f"restore_{user_id}.xlsx")
       await file.download_to_drive(file_path)
       
       # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ë–î —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
       result = ImportService.restore_database_from_excel(file_path)
       
       if result.get('success', False):
           restored_tables = result.get('restored_tables', [])
           restored_count = len(restored_tables)
           
           success_text = (
               f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
               f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: **{restored_count}**\n"
               f"–°–ø–∏—Å–æ–∫: {', '.join(restored_tables)}"
           )
           
           await update.message.reply_text(
               success_text,
               reply_markup=InlineKeyboardMarkup([[
                   InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")
               ]]),
               parse_mode=ParseMode.MARKDOWN
           )
       else:
           error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
           await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {error_msg}")
           
   except Exception as e:
       logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: {e}")
       await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏.")

   finally:
     # FIXED: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è Windows
     if 'file_path' in locals() and os.path.exists(file_path):
         try:
             import gc
             import time
             gc.collect()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
             time.sleep(0.2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ñ–∞–π–ª–∞
             os.remove(file_path)
             logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {file_path}")
         except (PermissionError, OSError):
             # Windows –º–æ–∂–µ—Ç –¥–µ—Ä–∂–∞—Ç—å —Ñ–∞–π–ª, –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
             logger.warning(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —É–¥–∞–ª–µ–Ω (–∑–∞–Ω—è—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–º): {file_path}")
         except Exception as e:
             logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")

# === –ü–†–û–ú–ï–ñ–£–¢–û–ß–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===


async def handle_hr_date_quick_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è HR –æ—Ç—á–µ—Ç–æ–≤ (—Å–µ–≥–æ–¥–Ω—è/–≤—á–µ—Ä–∞)"""
    query = update.callback_query
    await query.answer()
    
    # –ü–∞—Ä—Å–∏–º callback: hr_report_[today/yesterday]_[discipline_id]
    parts = query.data.split('_')
    if len(parts) < 4:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    date_type = parts[2]  # today –∏–ª–∏ yesterday
    discipline_id = parts[3]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É
    if date_type == 'today':
        selected_date = date.today()
    else:  # yesterday
        selected_date = date.today() - timedelta(days=1)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ analytics
    from bot.handlers.analytics import show_hr_report_for_date
    await show_hr_report_for_date(update, context, discipline_id, selected_date)


async def handle_problem_brigades_quick_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º –±—Ä–∏–≥–∞–¥–∞–º"""
    query = update.callback_query
    await query.answer()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –∏–∑ callback
    if "today" in query.data:
        selected_date = date.today()
    elif "yesterday" in query.data:
        selected_date = date.today() - timedelta(days=1)
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞—Ç—ã.")
        return
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ analytics
    from bot.handlers.analytics import generate_problem_brigades_report
    await generate_problem_brigades_report(update, context)

def register_export_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    from telegram.ext import CallbackQueryHandler, MessageHandler, filters
    from datetime import date, timedelta
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
    application.add_handler(CallbackQueryHandler(export_reports_to_excel, pattern="^get_excel_report$"))
    application.add_handler(CallbackQueryHandler(download_db_backup, pattern="^db_backup_download$"))
    application.add_handler(CallbackQueryHandler(export_full_db_to_excel, pattern="^export_full_db$"))
    application.add_handler(CallbackQueryHandler(get_directories_template, pattern="^get_directories_template_button$"))
    application.add_handler(CallbackQueryHandler(export_all_users_to_excel, pattern="^export_all_users$"))
    
    # –ù–û–í–´–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(MessageHandler(
        filters.Document.MimeType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") & 
        filters.User(user_id=int(OWNER_ID)),
        handle_db_restore_file
    ))
    
    # –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    application.add_handler(CallbackQueryHandler(handle_hr_date_quick_buttons, pattern="^hr_report_(today|yesterday)_"))
    application.add_handler(CallbackQueryHandler(handle_problem_brigades_quick_buttons, pattern="^problem_brigades_by_date_(today|yesterday)$"))
    