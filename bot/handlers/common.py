"""
–û–±—â–∏–µ handlers (start, main menu, etc.)
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CommandHandler, CallbackQueryHandler, ContextTypes

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
from config.settings import OWNER_ID, REPORTS_GROUP_URL
from services.user_service import UserService
from services.menu_service import MenuService
from bot.middleware.security import check_user_role
from utils.chat_utils import auto_clean  # <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –ù–û–í–´–ô –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
from utils.localization import get_user_language, get_user_language_sync

logger = logging.getLogger(__name__)



async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_id = str(user.id)
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({user.first_name}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    welcome_text, keyboard_buttons = await MenuService.get_main_menu_text_and_buttons(user_id)
    
    reply_markup = InlineKeyboardMarkup(keyboard_buttons)
    
    
    # –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –í–û–ó–í–†–ê–©–ê–ï–ú –µ–≥–æ, —á—Ç–æ–±—ã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –º–æ–≥ –µ–≥–æ –æ—Ç—Å–ª–µ–¥–∏—Ç—å
    return await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        
    )


async def back_to_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(update.effective_user.id)
    
    welcome_text, keyboard_buttons = await MenuService.get_main_menu_text_and_buttons(user_id)
    reply_markup = InlineKeyboardMarkup(keyboard_buttons)

    # –ü—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –í–û–ó–í–†–ê–©–ê–ï–ú –µ–≥–æ
    return await query.edit_message_text(
        welcome_text,
        reply_markup=reply_markup,
        
    )

# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---


async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(update.effective_user.id)
    user_role = check_user_role(user_id)  # –°–ò–ù–•–†–û–ù–ù–´–ô –≤—ã–∑–æ–≤
    lang = await get_user_language(user_id)  # –ê–°–ò–ù–•–†–û–ù–ù–´–ô –≤—ã–∑–æ–≤
    
    user_info = await UserService.get_user_info(user_id)
    
    if user_info:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if user_info.get('role_table') == 'owner':
            profile_text = "üëë **–ü—Ä–æ—Ñ–∏–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–∏—Å—Ç–µ–º—ã**\n\n"
        else:
            profile_text = "üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
        
        # FIXED: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è
        first_name = user_info.get('first_name', '')
        last_name = user_info.get('last_name', '')
        full_name = f"{first_name} {last_name}".strip()
        
        profile_text += f"üìù **–ò–º—è:** {full_name if full_name else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        profile_text += f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {user_info.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        
        # ADDED: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É
        discipline = user_info.get('discipline_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        profile_text += f"üè¢ **–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞:** {discipline}\n"
        
        # FIXED: –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å
        role_info = MenuService._get_user_role_info(user_role, lang)
        if role_info:
            profile_text += f"üëî **–†–æ–ª—å:** {role_info}\n"
        else:
            profile_text += f"üëî **–†–æ–ª—å:** –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞\n"
            
        # ADDED: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è Owner
        if user_info.get('role_table') == 'owner':
            profile_text += f"\nüîë **–ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏:** –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º\n"
            profile_text += f"‚öôÔ∏è **–°—Ç–∞—Ç—É—Å:** –í–ª–∞–¥–µ–ª–µ—Ü —Å–∏—Å—Ç–µ–º—ã\n"
            
    else:
        profile_text = "‚ùå **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞**\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]]
    return await query.edit_message_text(
        profile_text, 
        reply_markup=InlineKeyboardMarkup(keyboard), 
        parse_mode='Markdown'
    )



async def show_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    query = update.callback_query
    await query.answer()
    
    info_text = "‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ**\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é."
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]]
    return await query.edit_message_text(info_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def placeholder_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"""
    query = update.callback_query
    await query.answer()
    
    text = "üöß **–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ**\n\n–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è!"
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]]
    return await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def show_language_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(update.effective_user.id)
    current_lang = await get_user_language(user_id)
    
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏
    languages = {
        'ru': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
        'en': 'üá∫üá∏ English', 
        'uz': 'üá∫üáø O\'zbekcha'
    }
    
    keyboard_buttons = []
    for lang_code, lang_name in languages.items():
        # –ü–æ–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
        if lang_code == current_lang:
            lang_name += " ‚úÖ"
        
        keyboard_buttons.append([InlineKeyboardButton(
            lang_name, 
            callback_data=f"set_language_{lang_code}"
        )])
    
    keyboard_buttons.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")])
    
    text = "üåê **–í—ã–±–æ—Ä —è–∑—ã–∫–∞ / Language Selection / Til tanlash**"
    
    await query.edit_message_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard_buttons),
        parse_mode='Markdown'
    )


async def change_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–º–µ–Ω—É —è–∑—ã–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
    lang_code = query.data.split('_')[-1]
    user_id = str(query.from_user.id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from utils.localization import update_user_language
    await update_user_language(user_id, lang_code)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
    success_messages = {
        'ru': '‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π',
        'en': '‚úÖ Language changed to English',
        'uz': '‚úÖ Til o\'zbekchaga o\'zgartirildi'
    }
    
    await query.edit_message_text(success_messages.get(lang_code, '‚úÖ Language changed'))
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –Ω–æ–≤—ã–º —è–∑—ã–∫–æ–º
    await back_to_start(update, context)

def register_common_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—â–∏—Ö handlers"""
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(back_to_start, pattern="^back_to_start$"))
    
    application.add_handler(CallbackQueryHandler(show_info, pattern="^show_info$"))
    application.add_handler(CallbackQueryHandler(show_profile, pattern="^show_profile$"))
    
     # –ù–û–í–´–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —è–∑—ã–∫–∞
    application.add_handler(CallbackQueryHandler(show_language_menu, pattern="^change_language$"))
    application.add_handler(CallbackQueryHandler(change_language, pattern="^set_language_"))


    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
    placeholders = [
        "owner_reports_menu", "owner_management_menu",
        "reports_menu_role", "admin_panel"
    ]
    for ph in placeholders:
        application.add_handler(CallbackQueryHandler(placeholder_handler, pattern=f"^{ph}$"))

    from bot.conversations.roster_flow import create_roster_conversation
    application.add_handler(create_roster_conversation())

    logger.info("‚úÖ Common handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")