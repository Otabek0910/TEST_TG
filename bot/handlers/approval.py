# bot/handlers/approval.py

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import CallbackQueryHandler, ContextTypes

from config.settings import OWNER_ID
# FIXED: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º db_query –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
from database.queries import db_query
from ..middleware.security import check_user_role
from services.admin_service import AdminService

logger = logging.getLogger(__name__)

async def handle_approval(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã."""
    query = update.callback_query
    print(f"DEBUG >>> –ö–ù–û–ü–ö–ê –ù–ê–ñ–ê–¢–ê! –î–ê–ù–ù–´–ï: {query.data}") # <-- –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£
   
    approver_id = str(query.from_user.id)
    
    user_role = check_user_role(approver_id)
    if not (user_role.get('isAdmin') or approver_id == OWNER_ID):
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    
    await query.answer()
    
    try:
        parts = query.data.split('_')
        action, role, user_id = parts[0], parts[1], parts[2]
    except (IndexError, ValueError):
        await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞.")
        return
    
    user_data = context.bot_data.get(user_id)
    if not user_data:
        await query.edit_message_text("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–∑–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª).")
        return

    # FIXED: –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∞ –Ω–µ –∏–∑ callback
    role = user_data.get('selected_role')
    if not role:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    # –ö–∞—Ä—Ç–∞ —Ä–æ–ª–µ–π –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∏ –∏–º–µ–Ω–∏ —Ç–∞–±–ª–∏—Ü—ã
    role_map = {
        'foreman': ('–ë—Ä–∏–≥–∞–¥–∏—Ä', 'brigades'), 'manager': ('–ú–µ–Ω–µ–¥–∂–µ—Ä', 'managers'), 
        'pto': ('–ü–¢–û', 'pto'), 'kiok': ('–ö–ò–û–ö', 'kiok'), 
        'supervisor': ('–°—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä', 'supervisors'), 'master': ('–ú–∞—Å—Ç–µ—Ä', 'masters')
    }
    role_text, table_name = role_map.get(role, (role.capitalize(), None))
    
    if action == 'approve':
        # --- FIXED: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
        if table_name:
            user_exists = db_query(f"SELECT 1 FROM {table_name} WHERE user_id = %s", (user_id,))
            if user_exists:
                admin_text = f"‚ö†Ô∏è **–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.**\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å —Ä–æ–ª—å—é ¬´{role_text}¬ª."
                await query.edit_message_text(admin_text, parse_mode=ParseMode.HTML)
                return
        # --- –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ ---

        success = await AdminService.create_user_in_db(user_data, user_id)
        
        if success:
            admin_text = f"‚úÖ <b>–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data.get('first_name', '')} –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ä–æ–ª—å—é ¬´{role_text}¬ª."
            await query.edit_message_text(admin_text, parse_mode=ParseMode.HTML)
            
            user_text = f"üéâ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!</b>\n\n–í–∞–º –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ —Ä–æ–ª—å ¬´{role_text}¬ª."
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]]
            try:
                await context.bot.send_message(user_id, user_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î.")
            
    elif action == 'reject':
        admin_text = f"‚ùå <b>–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b> –ø–æ —Ä–æ–ª–∏ ¬´{role_text}¬ª."
        await query.edit_message_text(admin_text, parse_mode=ParseMode.HTML)
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    if user_id in context.bot_data:
        del context.bot_data[user_id]


def register_approval_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è handlers –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–æ–∫"""
    print("DEBUG >>> –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê –ö–ù–û–ü–û–ö –û–î–û–ë–†–ï–ù–ò–Ø...") # <-- –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£
    application.add_handler(CallbackQueryHandler(handle_approval, pattern="^(approve|reject)_"))
    logger.info("‚úÖ Approval handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")