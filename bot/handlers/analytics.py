# bot/handlers/analytics.py

import logging
from datetime import date, datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, ConversationHandler, CallbackQueryHandler, MessageHandler, filters

from bot.middleware.security import check_user_role
from services.analytics_service import AnalyticsService
from utils.localization import get_user_language, get_text, get_data_translation
from utils.constants import SELECTING_OVERVIEW_ACTION, AWAITING_OVERVIEW_DATE, GETTING_HR_DATE
from database.queries import db_query

logger = logging.getLogger(__name__)


async def show_historical_report_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞)"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    user_role = check_user_role(user_id)
    lang = get_user_language(user_id)
    
    await query.edit_message_text(f"‚è≥ {get_text('loading_please_wait', lang)}...", parse_mode=ParseMode.MARKDOWN)
    
    if user_role.get('isAdmin') or user_role.get('managerLevel') == 1:
        stats_data = await AnalyticsService.get_overall_statistics() # FIXED: await
        
        if not stats_data:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        header = "üìä *–û–±—â–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º*"
        report_stats = stats_data.get('report_stats', {})
        total_reports = stats_data.get('total_reports', 0)
        non_reporters_count = stats_data.get('non_reporters_count', 0)
        
        discipline_analysis = stats_data.get('discipline_analysis', {})
        overall_output_percent = discipline_analysis.get('overall_output_percent', 0)
        discipline_summary = discipline_analysis.get('discipline_summary', [])
        
        message_parts = [
            header,
            "---",
            f"üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ (–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è):*",
            f"  - –í—Å–µ–≥–æ –ø–æ–¥–∞–Ω–æ: *{total_reports}*",
            f"  - ‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ: *{report_stats.get('1', 0)}*", 
            f"  - ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: *{report_stats.get('-1', 0)}*",
            f"  - ‚è≥ –û–∂–∏–¥–∞–µ—Ç: *{report_stats.get('0', 0)}*",
            f"\nüö´ *–ù–µ —Å–¥–∞–ª–∏ –æ—Ç—á–µ—Ç —Å–µ–≥–æ–¥–Ω—è: {non_reporters_count} –±—Ä–∏–≥–∞–¥*",
            f"\nüí° *–û–±—â–∞—è —Å—Ä–µ–¥–Ω—è—è –≤—ã—Ä–∞–±–æ—Ç–∫–∞: {overall_output_percent:.1f}%*"
        ]
        
        if discipline_summary:
            message_parts.append("\nüìä *–°—Ä–µ–¥–Ω—è—è –≤—ã—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º:*")
            for disc in discipline_summary:
                translated_name = get_data_translation(disc['name'], lang)
                message_parts.append(f"  - *{translated_name}*: —Å—Ä–µ–¥–Ω—è—è –≤—ã—Ä–∞–±–æ—Ç–∫–∞ *{disc['avg_output']:.1f}%*")
        
        message_parts.append("\n\nüóÇÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:*")
        
        final_text = "\n".join(message_parts)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
        disciplines = await db_query("SELECT name FROM disciplines ORDER BY name") # FIXED: await
        keyboard_buttons = []
        
        if disciplines:
            for name, in disciplines:
                translated_discipline = get_data_translation(name, lang)
                button_text = f"üìã {translated_discipline}"
                keyboard_buttons.append([InlineKeyboardButton(button_text, callback_data=f"gen_hist_report_{name}")])
        
        keyboard_buttons.append([InlineKeyboardButton(get_text('back_button', lang), callback_data="report_menu_all")])
        
        await query.edit_message_text(
            text=final_text, 
            reply_markup=InlineKeyboardMarkup(keyboard_buttons), 
            parse_mode=ParseMode.MARKDOWN
        )
        
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ä–æ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É
        discipline = user_role.get('discipline')
        if not discipline:
            await query.edit_message_text("‚ùóÔ∏è*–û—à–∏–±–∫–∞:* –î–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞.")
            return
        await generate_discipline_dashboard(update, context, discipline_name=discipline)


async def generate_discipline_dashboard(update: Update, context: ContextTypes.DEFAULT_TYPE, discipline_name: str = None):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞ –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞)"""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏–∑ callback_data –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
    if not discipline_name:
        if "gen_hist_report_" in query.data:
            discipline_name = query.data.replace('gen_hist_report_', '')
        else:
            discipline_name = query.data.split('_', 3)[-1]
    
    user_id = str(query.from_user.id)
    user_role = check_user_role(user_id)
    lang = get_user_language(user_id)
    
    await query.edit_message_text(
        f"‚è≥ {get_text('loading_please_wait', lang)} ({get_data_translation(discipline_name, lang)})...", 
        parse_mode=ParseMode.MARKDOWN
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    dashboard_data = await AnalyticsService.get_discipline_dashboard_data(discipline_name, user_role) # FIXED: await
    
    if not dashboard_data:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    translated_discipline = get_data_translation(discipline_name, lang)
    header = f"üìä *–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ ¬´{translated_discipline}¬ª*"
    
    user_counts = dashboard_data.get('user_counts', {})
    report_stats = dashboard_data.get('report_stats', {})
    total_reports = dashboard_data.get('total_reports', 0)
    non_reporters_count = dashboard_data.get('non_reporters_count', 0)
    low_performance_count = dashboard_data.get('low_performance_count', 0)
    analysis_data = dashboard_data.get('analysis_data', {})
    
    message_parts = [
        header,
        "---",
        f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ:*",
        f"  - –ë—Ä–∏–≥–∞–¥–∏—Ä—ã: *{user_counts['brigades']}*", 
        f"  - –ü–¢–û: *{user_counts['pto']}*",
        f"  - –ö–ò–û–ö: *{user_counts['kiok']}*",
        f"\nüìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ:*",
        f"  - –í—Å–µ–≥–æ –ø–æ–¥–∞–Ω–æ: *{total_reports}*",
        f"  - ‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ: *{report_stats.get('1', 0)}*",
        f"  - ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: *{report_stats.get('-1', 0)}*", 
        f"  - ‚è≥ –û–∂–∏–¥–∞–µ—Ç: *{report_stats.get('0', 0)}*",
        f"\nüö´ *–ù–µ —Å–¥–∞–ª–∏ –æ—Ç—á–µ—Ç —Å–µ–≥–æ–¥–Ω—è: {non_reporters_count} –±—Ä–∏–≥–∞–¥*"
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –±—Ä–∏–≥–∞–¥–∞—Ö
    if low_performance_count > 0:
        message_parts.append(f"‚ö†Ô∏è *–ë—Ä–∏–≥–∞–¥ —Å –Ω–∏–∑–∫–æ–π –≤—ã—Ä–∞–±–æ—Ç–∫–æ–π: {low_performance_count}*")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤—ã—Ä–∞–±–æ—Ç–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if analysis_data and not user_role.get('isKiok'):
        overall_output = analysis_data.get('overall_output_percent', 0)
        work_analysis = analysis_data.get('work_analysis', [])
        
        message_parts.append(f"\nüí° *–û–±—â–∞—è —Å—Ä–µ–¥–Ω—è—è –≤—ã—Ä–∞–±–æ—Ç–∫–∞: {overall_output:.1f}%*")
        
        if work_analysis:
            message_parts.append("\nüõ†Ô∏è *–ê–Ω–∞–ª–∏–∑ –ø–æ –≤–∏–¥–∞–º —Ä–∞–±–æ—Ç (—Ñ–∞–∫—Ç/–ø–ª–∞–Ω | % –≤—ã—Ä–∞–±–æ—Ç–∫–∏):*")
            for work in work_analysis:
                work_name = get_data_translation(work['work_type'], lang)
                total_volume = work['total_volume']
                total_planned = work['total_planned'] 
                avg_output = work['avg_output']
                message_parts.append(f"  - *{work_name}*:")
                message_parts.append(f"    `{total_volume:.1f} / {total_planned:.1f} | {avg_output:.1f}%`")
    
    final_text = "\n".join(message_parts)
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    back_button_callback = "report_historical" if (user_role.get('isAdmin') or user_role.get('managerLevel') == 1) else "report_menu_all"
    keyboard = [[InlineKeyboardButton(get_text('back_button', lang), callback_data=back_button_callback)]]
    
    await query.edit_message_text(
        text=final_text, 
        reply_markup=InlineKeyboardMarkup(keyboard), 
        parse_mode=ParseMode.MARKDOWN
    )


async def show_overview_dashboard_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, selected_date_override: date = None) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±–∑–æ—Ä–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞)"""
    query = update.callback_query
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É
    selected_date = date.today()
    if selected_date_override:
        selected_date = selected_date_override
    elif query:
        await query.answer()
        if query.data.startswith("report_overview_date_"):
            date_str = query.data.split('_')[-1]
            if date_str == 'today':
                selected_date = date.today()
            elif date_str == 'yesterday':
                selected_date = date.today() - timedelta(days=1)
            else:
                try:
                    selected_date = datetime.strptime(date_str, '%Y-%m-%d').date()
                except ValueError:
                    selected_date = date.today()
    
    user_id = str(query.from_user.id)
    user_role = check_user_role(user_id)
    lang = get_user_language(user_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    if query.message:
        wait_msg = await query.edit_message_text(f"‚è≥ {get_text('loading_please_wait', lang)}")
    else:
        wait_msg = await update.message.reply_text(f"‚è≥ {get_text('loading_please_wait', lang)}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    dashboard_data = await AnalyticsService.get_overview_dashboard_data(selected_date) # FIXED: await
    discipline_data = dashboard_data.get('discipline_data', [])
 
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    date_str_for_callback = selected_date.strftime('%Y-%m-%d')
    message_lines = [f"üìä *–°–≤–æ–¥–∫–∞ –∑–∞ {selected_date.strftime('%d.%m.%Y')}*", ""]
    
    if not discipline_data:
        message_lines.append("üìã *–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö*")
    else:
        for disc in discipline_data:
            disc_name = get_data_translation(disc['name'], lang)
            main_people = disc['main_people']
            other_people = disc['other_people'] 
            performance = disc['performance']
            fact_volume = disc['fact_volume']
            
            fact_volume_str = f"({fact_volume:.1f})" if fact_volume > 0 else ""
            
            if main_people > 0:
                message_lines.append(f"*{disc_name}:* {main_people} —á–µ–ª. * ({performance:.1f}%) {fact_volume_str}")
            
            if other_people > 0:
                message_lines.append(f"_{get_text('other_works_label', lang)}:_ *{other_people} —á–µ–ª.*")
    
    message_text = "\n".join(message_lines)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–∞—Ç—ã
    date_buttons = [
        InlineKeyboardButton("–í—á–µ—Ä–∞", callback_data="report_overview_date_yesterday"),
        InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="report_overview_date_today"), 
        InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data="report_overview_pick_date")
    ]
    
    keyboard_buttons = [date_buttons]
    
    # –ö–Ω–æ–ø–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ —Ä–æ–ª—è–º
    if user_role.get('isAdmin') or user_role.get('managerLevel') == 1:
        disciplines = await db_query("SELECT id, name FROM disciplines ORDER BY name") # FIXED: await
        if disciplines:
            for disc_id, disc_name in disciplines:
                translated_name = get_data_translation(disc_name, lang)
                keyboard_buttons.append([InlineKeyboardButton(
                    f"üìä {translated_name}", 
                    callback_data=f"gen_overview_chart_{disc_id}_{date_str_for_callback}"
                )])
    
    elif user_role.get('isPto') or user_role.get('managerLevel') == 2:
        user_discipline_name = user_role.get('discipline')
        if user_discipline_name:
            discipline_id_raw = await db_query("SELECT id FROM disciplines WHERE name = %s", (user_discipline_name,)) # FIXED: await
            if discipline_id_raw:
                user_discipline_id = discipline_id_raw[0][0]
                keyboard_buttons.append([InlineKeyboardButton(
                    "üìä –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π –≥—Ä–∞—Ñ–∏–∫", 
                    callback_data=f"gen_overview_chart_{user_discipline_id}_{date_str_for_callback}"
                )])
    
    keyboard_buttons.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤", callback_data="report_menu_all")])
    
    await wait_msg.edit_text(
        text=message_text, 
        reply_markup=InlineKeyboardMarkup(keyboard_buttons), 
        parse_mode=ParseMode.MARKDOWN
    )
    
    return SELECTING_OVERVIEW_ACTION

  
async def prompt_for_overview_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –¥–ª—è –æ–±–∑–æ—Ä–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞"""
    query = update.callback_query
    await query.answer()
    
    lang = get_user_language(str(query.from_user.id))
    
    await query.edit_message_text(
        text=get_text('prompt_overview_date', lang),
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton(get_text('back_button', lang), callback_data="report_overview")
        ]]),
        parse_mode=ParseMode.MARKDOWN
    )
    
    return AWAITING_OVERVIEW_DATE


async def process_overview_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã –¥–ª—è –æ–±–∑–æ—Ä–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞"""
    user_input = update.message.text.strip()
    lang = get_user_language(str(update.effective_user.id))
    
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
        for date_format in ['%d.%m.%Y', '%d/%m/%Y', '%Y-%m-%d', '%d-%m-%Y']:
            try:
                selected_date = datetime.strptime(user_input, date_format).date()
                break
            except ValueError:
                continue
        else:
            raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
        if selected_date > date.today():
            await update.message.reply_text(
                get_text('date_future_error', lang),
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton(get_text('back_button', lang), callback_data="report_overview")
                ]])
            )
            return AWAITING_OVERVIEW_DATE
        
        if selected_date < date.today() - timedelta(days=365):
            await update.message.reply_text(
                get_text('date_too_old_error', lang),
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton(get_text('back_button', lang), callback_data="report_overview")
                ]])
            )
            return AWAITING_OVERVIEW_DATE
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–∫–∞–∑—É –¥–∞—à–±–æ—Ä–¥–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
        return await show_overview_dashboard_menu(update, context, selected_date_override=selected_date)
        
    except ValueError:
        await update.message.reply_text(
            get_text('date_format_error', lang),
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(get_text('back_button', lang), callback_data="report_overview")
            ]])
        )
        return AWAITING_OVERVIEW_DATE


async def generate_overview_chart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞)"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    lang = get_user_language(user_id)
    
    try:
        # –ü–∞—Ä—Å–∏–º callback_data
        base_callback, date_str = query.data.rsplit('_', 1)
        discipline_id = int(base_callback.split('_')[-1])
        selected_date = datetime.strptime(date_str, '%Y-%m-%d').date()
    except (ValueError, IndexError):
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ callback_data –≤ generate_overview_chart: {query.data}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        return SELECTING_OVERVIEW_ACTION
    
    await query.edit_message_text(f"‚è≥ {get_text('loading_please_wait', lang)}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    chart_data = await AnalyticsService.get_chart_data(discipline_id, selected_date) # FIXED: await
  
    if not chart_data:
        discipline_name_raw = await db_query("SELECT name FROM disciplines WHERE id = %s", (discipline_id,)) # FIXED: await
        discipline_name = discipline_name_raw[0][0] if discipline_name_raw else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è"
        
        await query.edit_message_text(
            f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞\n\n"
            f"–ü–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ ¬´{discipline_name}¬ª –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ —Å –Ω–æ—Ä–º–∏—Ä—É–µ–º—ã–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"report_overview_date_{date_str}")
            ]])
        )
        return SELECTING_OVERVIEW_ACTION
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ (–±–µ–∑ matplotlib –ø–æ–∫–∞)
    discipline_name = chart_data['discipline_name']
    chart_items = chart_data['chart_data']
    
    message_lines = [
        f"üìä *–ì—Ä–∞—Ñ–∏–∫ –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ ¬´{get_data_translation(discipline_name, lang)}¬ª*",
        f"üìÖ *–î–∞—Ç–∞: {selected_date.strftime('%d.%m.%Y')}*",
        "",
        "*–ü–ª–∞–Ω vs –§–∞–∫—Ç –ø–æ –≤–∏–¥–∞–º —Ä–∞–±–æ—Ç:*",
        ""
    ]
    
    for item in chart_items:
        work_type = get_data_translation(item['work_type'], lang)
        plan = item['plan']
        fact = item['fact']
        people = item['people']
        percentage = (fact / plan * 100) if plan > 0 else 0
        
        message_lines.append(f"*{work_type}* ({people} —á–µ–ª.):")
        message_lines.append(f"  –ü–ª–∞–Ω: {plan:.1f}")
        message_lines.append(f"  –§–∞–∫—Ç: {fact:.1f} ({percentage:.1f}%)")
        message_lines.append("")
    
    message_text = "\n".join(message_lines)
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"report_overview_date_{date_str}")]]
    
    await query.edit_message_text(
        text=message_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    
    return SELECTING_OVERVIEW_ACTION


async def show_hr_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é '–õ—é–¥—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã' —Å –≤—ã–±–æ—Ä–æ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    user_role = check_user_role(user_id)
    lang = get_user_language(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not (user_role.get('isAdmin') or user_role.get('isManager') or user_role.get('isPto')):
        await query.edit_message_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ HR –æ—Ç—á–µ—Ç–æ–≤.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
    if user_role.get('isAdmin') or user_role.get('managerLevel') == 1:
        disciplines = await db_query("SELECT id, name FROM disciplines ORDER BY name") # FIXED: await
    else:
        user_discipline = user_role.get('discipline')
        disciplines = await db_query("SELECT id, name FROM disciplines WHERE name = %s", (user_discipline,)) # FIXED: await
 
    if not disciplines:
        await query.edit_message_text("‚ùå –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    keyboard_buttons = []
    for disc_id, disc_name in disciplines:
        translated_name = get_data_translation(disc_name, lang)
        keyboard_buttons.append([InlineKeyboardButton(
            f"üë• {translated_name}", 
            callback_data=f"hr_date_select_{disc_id}"
        )])
    
    keyboard_buttons.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="report_menu_all")])
    
    text = "üë• **–õ—é–¥—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Å—Ç–∞–≤–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞:"
    
    await query.edit_message_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard_buttons),
        parse_mode=ParseMode.MARKDOWN
    )


async def get_hr_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É –¥–ª—è HR –æ—Ç—á–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    # –ü–∞—Ä—Å–∏–º discipline_id –∏–∑ callback
    discipline_id = query.data.replace('hr_date_select_', '')
    context.user_data['hr_discipline_id'] = discipline_id
    
    lang = get_user_language(str(query.from_user.id))
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
    disc_name_raw = await db_query("SELECT name FROM disciplines WHERE id = %s", (discipline_id,)) # FIXED: await
    disc_name = disc_name_raw[0][0] if disc_name_raw else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è"
    translated_name = get_data_translation(disc_name, lang)
    
    keyboard = [
        [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data=f"hr_report_today_{discipline_id}")],
        [InlineKeyboardButton("–í—á–µ—Ä–∞", callback_data=f"hr_report_yesterday_{discipline_id}")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="show_hr_menu")]
    ]
    
    text = (
        f"üìÖ **–î–∞—Ç–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ ¬´{translated_name}¬ª**\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
    )
    
    await query.edit_message_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    
    return GETTING_HR_DATE

  
async def process_hr_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É –¥–ª—è HR –æ—Ç—á–µ—Ç–∞"""
    user_input = update.message.text.strip()
    discipline_id = context.user_data.get('hr_discipline_id')
    
    if not discipline_id:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
        return ConversationHandler.END
    
    try:
        selected_date = datetime.strptime(user_input, "%d.%m.%Y").date()
        await show_hr_report_for_date(update, context, discipline_id, selected_date)
    except ValueError:
        lang = get_user_language(str(update.effective_user.id))
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.01.2025)",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="show_hr_menu")
            ]])
        )
        return GETTING_HR_DATE
    
    context.user_data.clear()
    return ConversationHandler.END


async def show_hr_report_for_date(update, context, discipline_id, selected_date: date):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç HR –æ—Ç—á–µ—Ç –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        hr_data = await AnalyticsService.get_hr_report_data(discipline_id, selected_date)
        
        if not hr_data:
            text = f"üìã –ó–∞ {selected_date.strftime('%d.%m.%Y')} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–∞–±–µ–ª—è–º"
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            disc_name = hr_data.get('discipline_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è')
            roster_data = hr_data.get('roster_data', [])
            total_people = hr_data.get('total_people', 0)
            brigades_count = hr_data.get('brigades_count', 0)
            
            message_lines = [
                f"üë• **HR –æ—Ç—á–µ—Ç –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ ¬´{disc_name}¬ª**",
                f"üìÖ **–î–∞—Ç–∞:** {selected_date.strftime('%d.%m.%Y')}",
                "",
                f"‚ñ™Ô∏è **–í—Å–µ–≥–æ –∑–∞—è–≤–ª–µ–Ω–æ:** {total_people} —á–µ–ª.",
                f"‚ñ™Ô∏è **–ê–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–∏–≥–∞–¥:** {brigades_count}",
                ""
            ]
            
            if roster_data:
                message_lines.append("**–°–æ—Å—Ç–∞–≤ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º:**")
                for role, count in roster_data:
                    message_lines.append(f"  - {role}: **{count}** —á–µ–ª.")
            
            text = "\n".join(message_lines)
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="show_hr_menu")]]
        
        if hasattr(update, 'message') and update.message:
            # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–µ–≥–æ
            await update.message.reply_text(
                text=text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            # –ï—Å–ª–∏ –∏–∑ callback query
            await update.callback_query.edit_message_text(
                text=text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HR –æ—Ç—á–µ—Ç–∞: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ HR –æ—Ç—á–µ—Ç–∞"
        
        if hasattr(update, 'message') and update.message:
            await update.message.reply_text(error_text)
        else:
            await update.callback_query.edit_message_text(error_text)

# === –ü–†–û–ë–õ–ï–ú–ù–´–ï –ë–†–ò–ì–ê–î–´ ===

async def handle_problem_brigades_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞ '–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –±—Ä–∏–≥–∞–¥—ã'"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    user_role = check_user_role(user_id)
    lang = get_user_language(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not (user_role.get('isAdmin') or user_role.get('isManager')):
        await query.edit_message_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º –±—Ä–∏–≥–∞–¥–∞–º.")
        return
    
    keyboard = [
        [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="problem_brigades_by_date_today")],
        [InlineKeyboardButton("–í—á–µ—Ä–∞", callback_data="problem_brigades_by_date_yesterday")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="report_menu_all")]
    ]
    
    await query.edit_message_text(
        text="‚ö†Ô∏è **–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –±—Ä–∏–≥–∞–¥—ã**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )


async def generate_problem_brigades_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º –±—Ä–∏–≥–∞–¥–∞–º"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    user_role = check_user_role(user_id)
    lang = get_user_language(user_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É
    if "today" in query.data:
        selected_date = date.today()
    elif "yesterday" in query.data:
        selected_date = date.today() - timedelta(days=1)
    else:
        selected_date = date.today()
    
    await query.edit_message_text(f"‚è≥ {get_text('loading_please_wait', lang)}...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        problem_data = await AnalyticsService.get_problem_brigades_data(selected_date, user_role)
        
        if not problem_data:
            text = f"‚úÖ –ù–∞ {selected_date.strftime('%d.%m.%Y')} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –±—Ä–∏–≥–∞–¥ –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ"
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            message_lines = [
                f"‚ö†Ô∏è **–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –±—Ä–∏–≥–∞–¥—ã –∑–∞ {selected_date.strftime('%d.%m.%Y')}**",
                ""
            ]
            
            non_reporters = problem_data.get('non_reporters', [])
            low_performers = problem_data.get('low_performers', [])
            
            if non_reporters:
                message_lines.append("**–ù–µ —Å–¥–∞–ª–∏ –æ—Ç—á–µ—Ç:**")
                for brigade_info in non_reporters:
                    discipline = get_data_translation(brigade_info['discipline'], lang)
                    message_lines.append(f"  - {brigade_info['name']} ({discipline})")
                message_lines.append("")
            
            if low_performers:
                message_lines.append("**–ù–∏–∑–∫–∞—è –≤—ã—Ä–∞–±–æ—Ç–∫–∞ (<100%):**")
                for brigade_info in low_performers:
                    discipline = get_data_translation(brigade_info['discipline'], lang)
                    performance = brigade_info['performance']
                    message_lines.append(f"  - {brigade_info['name']} ({discipline}): {performance:.1f}%")
            
            text = "\n".join(message_lines)
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="handle_problem_brigades_button")]]
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º –±—Ä–∏–≥–∞–¥–∞–º: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞")

# === –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –ë–†–ò–ì–ê–î–ò–†–û–í ===


async def show_foreman_performance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    user_role = check_user_role(user_id)
    lang = get_user_language(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not (user_role.get('isAdmin') or user_role.get('isManager')):
        await query.edit_message_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤.")
        return
    
    await query.edit_message_text(f"‚è≥ {get_text('loading_please_wait', lang)}...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        performance_data = await AnalyticsService.get_foreman_performance_data(user_role)
        
        if not performance_data:
            text = "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤"
        else:
            message_lines = [
                "üìä **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)**",
                ""
            ]
            
            for brigade_info in performance_data:
                name = brigade_info['name']
                discipline = get_data_translation(brigade_info['discipline'], lang)
                avg_performance = brigade_info['avg_performance']
                reports_count = brigade_info['reports_count']
                
                performance_icon = "üü¢" if avg_performance >= 100 else "üü°" if avg_performance >= 80 else "üî¥"
                
                message_lines.append(
                    f"{performance_icon} **{name}** ({discipline})\n"
                    f"    –°—Ä–µ–¥–Ω—è—è –≤—ã—Ä–∞–±–æ—Ç–∫–∞: {avg_performance:.1f}% | –û—Ç—á–µ—Ç–æ–≤: {reports_count}"
                )
            
            text = "\n".join(message_lines)
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="report_menu_all")]]
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

# === –û–ë–ù–û–í–õ–ï–ù–ò–ï register_analytics_handlers ===

def register_analytics_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    from telegram.ext import CallbackQueryHandler, MessageHandler, filters, ConversationHandler
    
    # ConversationHandler –¥–ª—è –æ–±–∑–æ—Ä–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞
    overview_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(show_overview_dashboard_menu, pattern="^report_overview$")],
        states={
            SELECTING_OVERVIEW_ACTION: [
                CallbackQueryHandler(show_overview_dashboard_menu, pattern="^report_overview_date_"),
                CallbackQueryHandler(prompt_for_overview_date, pattern="^report_overview_pick_date$"),
                CallbackQueryHandler(generate_overview_chart, pattern="^gen_overview_chart_"),
            ],
            AWAITING_OVERVIEW_DATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_overview_date),
                CallbackQueryHandler(show_overview_dashboard_menu, pattern="^report_overview_date_"),
            ],
        },
        fallbacks=[
            CallbackQueryHandler(show_historical_report_menu, pattern="^report_menu_all$"),
        ],
        per_user=True, allow_reentry=True
    )

    hr_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(get_hr_date, pattern="^hr_date_select_")],
        states={
            GETTING_HR_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_hr_date)]
        },
        fallbacks=[
            CallbackQueryHandler(show_hr_menu, pattern="^show_hr_menu$"),
        ],
        per_user=True, allow_reentry=True
    )
    application.add_handler(hr_conv_handler)
    
    application.add_handler(overview_conv_handler)
    
    # –û—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CallbackQueryHandler(show_historical_report_menu, pattern="^report_historical$"))
    application.add_handler(CallbackQueryHandler(generate_discipline_dashboard, pattern="^gen_hist_report_"))
    
    # –ù–û–í–´–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CallbackQueryHandler(show_hr_menu, pattern="^show_hr_menu$"))
    application.add_handler(CallbackQueryHandler(handle_problem_brigades_button, pattern="^handle_problem_brigades_button$"))
    application.add_handler(CallbackQueryHandler(generate_problem_brigades_report, pattern="^problem_brigades_by_date_"))
    application.add_handler(CallbackQueryHandler(show_foreman_performance, pattern="^foreman_performance$"))

    # HR –æ—Ç—á–µ—Ç—ã —Å –±—ã—Å—Ç—Ä—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    application.add_handler(CallbackQueryHandler(
        lambda u, c: show_hr_report_for_date(u, c, u.callback_query.data.split('_')[-1], date.today()),
        pattern="^hr_report_today_"
    ))
    application.add_handler(CallbackQueryHandler(
        lambda u, c: show_hr_report_for_date(u, c, u.callback_query.data.split('_')[-1], date.today() - timedelta(days=1)),
        pattern="^hr_report_yesterday_"
    ))
    
    
    logger.info("‚úÖ Analytics handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")