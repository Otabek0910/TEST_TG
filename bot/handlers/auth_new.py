# bot/handlers/auth_new.py

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.constants import ParseMode
from telegram.ext import CallbackQueryHandler, MessageHandler, filters, ContextTypes

from bot.middleware.state_manager import StateManager, UserState, StateDecorator
from config.settings import OWNER_ID
from utils.localization import get_text, get_user_language
from utils.chat_utils import auto_clean
from database.queries import db_query
from services.admin_service import AdminService

logger = logging.getLogger(__name__)

# ============================================================================
# ENTRY POINT
# ============================================================================


async def start_auth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ù–ê–î–ï–ñ–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(update.effective_user.id)
    lang = await get_user_language(user_id)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    StateManager.set_state(context, user_id, UserState.SELECTING_ROLE)
    
    keyboard = [
        [InlineKeyboardButton("üë®‚Äçüîß –°—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä", callback_data="auth_supervisor")],
        [InlineKeyboardButton("üî® –ú–∞—Å—Ç–µ—Ä", callback_data="auth_master")],
        [InlineKeyboardButton("üë∑ –ë—Ä–∏–≥–∞–¥–∏—Ä", callback_data="auth_foreman")],
        [InlineKeyboardButton("üìä –ö–ò–û–ö", callback_data="auth_kiok")],
        [InlineKeyboardButton("üè≠ –ü–¢–û", callback_data="auth_pto")],
        [InlineKeyboardButton("üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä", callback_data="auth_manager")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_auth")]
    ]
    
    await query.edit_message_text(
        text=get_text('auth_prompt_role', lang),
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )

# ============================================================================
# ROLE SELECTION  
# ============================================================================


@StateDecorator.require_state(UserState.SELECTING_ROLE)
async def select_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ä–æ–ª–∏ - —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(update.effective_user.id)
    lang = await get_user_language(user_id)
    
    selected_role = query.data.replace('auth_', '')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ä–æ–ª—å
    StateManager.update_state_data(context, user_id, {'selected_role': selected_role})
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –∏–º–µ–Ω–∏
    StateManager.set_state(context, user_id, UserState.GETTING_NAME)

    sent_message = await query.edit_message_text(
        text=get_text('auth_prompt_name', lang),
        parse_mode=ParseMode.HTML
    )
    StateManager.update_state_data(context, user_id, {'last_prompt_id': sent_message.message_id})

# ============================================================================
# NAME INPUT
# ============================================================================

@StateDecorator.require_state(UserState.GETTING_NAME)
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ - —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    user_id = str(update.effective_user.id)
    lang = await get_user_language(user_id)

        # FIXED: –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
    state_data = StateManager.get_state_data(context, user_id)
    last_prompt_id = state_data.get('last_prompt_id')
    if last_prompt_id:
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=last_prompt_id)
        except Exception:
            pass
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update.message.delete()
    
    user_input = update.message.text.strip()
    if ' ' not in user_input or len(user_input.split()) < 2:
        sent_message = await context.bot.send_message(
            update.effective_chat.id,
            get_text('auth_error_name', lang),
            parse_mode=ParseMode.HTML
        )

        StateManager.update_state_data(context, user_id, {'last_prompt_id': sent_message.message_id})
        # –ù–ï –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –æ—Å—Ç–∞–µ–º—Å—è –≤ GETTING_NAME
        return
    
    parts = user_input.split(' ', 1)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é
    StateManager.update_state_data(context, user_id, {
        'first_name': parts[0],
        'last_name': parts[1]
    })
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –∫–æ–Ω—Ç–∞–∫—Ç–∞
    StateManager.set_state(context, user_id, UserState.GETTING_CONTACT)
    
    reply_markup = ReplyKeyboardMarkup(
        [[KeyboardButton(text=get_text('auth_contact_button', lang), request_contact=True)]],
        resize_keyboard=True, one_time_keyboard=True
    )
    
    sent_message = await context.bot.send_message(
        update.effective_chat.id,
        get_text('auth_prompt_contact', lang),
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    StateManager.update_state_data(context, user_id, {'last_prompt_id': sent_message.message_id})

# ============================================================================
# CONTACT INPUT
# ============================================================================


@StateDecorator.require_state(UserState.GETTING_CONTACT)
async def get_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ - —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –æ—á–∏—Å—Ç–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = str(update.effective_user.id)

     # 1. –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (–ø—Ä–æ—Å—å–±—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç)
    state_data = StateManager.get_state_data(context, user_id)
    last_prompt_id = state_data.get('last_prompt_id')
    if last_prompt_id:
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=last_prompt_id)
        except Exception:
            pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

    # 2. –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–∞–º–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
    await update.message.delete()

    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", –æ—Ç–ø—Ä–∞–≤–∏–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    temp_msg = await context.bot.send_message(
        update.effective_chat.id,
        "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...",
        reply_markup=ReplyKeyboardRemove()
    )

    # –£–¥–∞–ª—è–µ–º —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await context.bot.delete_message(
        chat_id=update.effective_chat.id,
        message_id=temp_msg.message_id
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if update.message.contact:
        StateManager.update_state_data(context, user_id, {
            'phone_number': update.message.contact.phone_number
        })

    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏ —Ä–µ—à–∞–µ–º, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ
    current_state_data = StateManager.get_state_data(context, user_id)
    role = current_state_data.get('selected_role')

    if role == 'manager':
        await handle_manager_level_selection(update, context)
    else:
        await handle_discipline_selection(update, context)

# ============================================================================
# MANAGER LEVEL
# ============================================================================

async def handle_manager_level_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    user_id = str(update.effective_user.id)
    lang = await get_user_language(user_id)
    
    StateManager.set_state(context, user_id, UserState.SELECTING_MANAGER_LEVEL)
    
    keyboard = [
        [InlineKeyboardButton(get_text('auth_manager_level1', lang), callback_data="level_1")],
        [InlineKeyboardButton(get_text('auth_manager_level2', lang), callback_data="level_2")]
    ]
    
    await context.bot.send_message(
        update.effective_chat.id,
        get_text('auth_prompt_manager_level', lang),
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )

@StateDecorator.require_state(UserState.SELECTING_MANAGER_LEVEL)
async def handle_manager_level(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    level = int(query.data.replace('level_', ''))
    
    StateManager.update_state_data(context, user_id, {'manager_level': level})
    
    if level == 1:
        # –£—Ä–æ–≤–µ–Ω—å 1 - —Å—Ä–∞–∑—É —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
        await finalize_registration(update, context)
    else:
        # –£—Ä–æ–≤–µ–Ω—å 2 - –Ω—É–∂–Ω–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞
        await handle_discipline_selection(update, context)

# ============================================================================
# DISCIPLINE SELECTION
# ============================================================================

async def handle_discipline_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã"""
    user_id = str(update.effective_user.id)
    lang = await get_user_language(user_id)
    
    StateManager.set_state(context, user_id, UserState.SELECTING_DISCIPLINE)
    
    disciplines = await db_query("SELECT id, name FROM disciplines ORDER BY name")
    
    if not disciplines:
        await context.bot.send_message(
            update.effective_chat.id,
            "‚ùå –û—à–∏–±–∫–∞: –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ."
        )
        return
    
    keyboard = [[InlineKeyboardButton(name, callback_data=f"disc_{disc_id}")] 
                for disc_id, name in disciplines]
    
    state_data = StateManager.get_state_data(context, user_id)
    role_key = state_data.get('selected_role', '')
    
    role_map_loc = {
        'supervisor': '—Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–∞', 'master': '–º–∞—Å—Ç–µ—Ä–∞', 'manager': '–º–µ–Ω–µ–¥–∂–µ—Ä–∞',
        'foreman': '–±—Ä–∏–≥–∞–¥–∏—Ä–∞', 'kiok': '–ö–ò–û–ö', 'pto': '–ü–¢–û'
    }
    role_for_text = role_map_loc.get(role_key, role_key)
    
    text_template = get_text('auth_prompt_discipline', lang)
    text = text_template.format(role=role_for_text)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.edit_message_text(
            text, 
            reply_markup=InlineKeyboardMarkup(keyboard), 
            parse_mode=ParseMode.HTML
        )
    else:
        await context.bot.send_message(
            update.effective_chat.id,
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )

@StateDecorator.require_state(UserState.SELECTING_DISCIPLINE)
async def handle_discipline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    discipline_id = query.data.replace('disc_', '')
    
    StateManager.update_state_data(context, user_id, {'discipline_id': discipline_id})
    
    await finalize_registration(update, context)

# ============================================================================
# FINALIZATION
# ============================================================================

@StateDecorator.clear_state_after
async def finalize_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –æ—á–∏—Å—Ç–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    user_id = str(update.effective_user.id)
    lang = await get_user_language(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    user_data = StateManager.get_state_data(context, user_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∞–º
    success = await AdminService.send_approval_request(context, user_data, user_id)
    
    if success:
        text = get_text('auth_pending_approval', lang)
    else:
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.edit_message_text(text, parse_mode=ParseMode.HTML)
    else:
        await context.bot.send_message(update.effective_chat.id, text, parse_mode=ParseMode.HTML)

# ============================================================================
# CANCELLATION
# ============================================================================

@StateDecorator.clear_state_after
async def cancel_auth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –æ—á–∏—Å—Ç–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    query = update.callback_query
    await query.answer("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    from bot.handlers.common import back_to_start
    await back_to_start(update, context)

# ============================================================================
# REGISTRATION
# ============================================================================

def register_new_auth_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ù–ê–î–ï–ñ–ù–´–• auth handlers"""
    
    # Entry point
    application.add_handler(CallbackQueryHandler(start_auth, pattern="^start_auth$"))
    
    # Role selection
    application.add_handler(CallbackQueryHandler(select_role, pattern="^auth_"))
    
    # Text inputs - –ë–ï–ó ConversationHandler!
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, get_name))
    application.add_handler(MessageHandler(filters.CONTACT, get_contact))
    
    # Selections
    application.add_handler(CallbackQueryHandler(handle_manager_level, pattern="^level_"))
    application.add_handler(CallbackQueryHandler(handle_discipline, pattern="^disc_"))
    
    # Cancellation
    application.add_handler(CallbackQueryHandler(cancel_auth, pattern="^cancel_auth$"))
    
    logger.info("‚úÖ NEW Auth handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã (–ë–ï–ó ConversationHandler)")