"""
ConversationHandler –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
# FIXED: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ParseMode –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
from telegram.constants import ParseMode
from telegram.ext import ConversationHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

from config.settings import OWNER_ID
from utils.constants import SELECTING_ROLE, GETTING_NAME, GETTING_CONTACT, SELECTING_MANAGER_LEVEL, SELECTING_DISCIPLINE
from utils.localization import get_text, get_user_language
from utils.chat_utils import clean_chat, track_message
from database.queries import db_query
from services.admin_service import AdminService

logger = logging.getLogger(__name__)
# ===== ENTRY POINT & ROLE SELECTION (–ø—Ä–æ—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫) =====

async def start_auth(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ –≤—Å–µ–º–∏ —Ä–æ–ª—è–º–∏ –∏ HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    query = update.callback_query
    await query.answer()
    lang = await get_user_language(str(update.effective_user.id))
    
    # FIXED: –î–æ–±–∞–≤–ª–µ–Ω—ã –≤—Å–µ —Ä–æ–ª–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    keyboard = [
        [InlineKeyboardButton("üë®‚Äçüîß –°—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä", callback_data="auth_supervisor")],
        [InlineKeyboardButton("üî® –ú–∞—Å—Ç–µ—Ä", callback_data="auth_master")],
        [InlineKeyboardButton("üë∑ –ë—Ä–∏–≥–∞–¥–∏—Ä", callback_data="auth_foreman")],
        [InlineKeyboardButton("üìä –ö–ò–û–ö", callback_data="auth_kiok")],
        [InlineKeyboardButton("üè≠ –ü–¢–û", callback_data="auth_pto")],
        [InlineKeyboardButton("üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä", callback_data="auth_manager")],
        [InlineKeyboardButton(get_text('back_button', lang), callback_data="cancel_auth")]
    ]
    
    # FIXED: –ò—Å–ø–æ–ª—å–∑—É–µ–º parse_mode=ParseMode.HTML
    await query.edit_message_text(
        text=get_text('auth_prompt_role', lang),
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )
    return SELECTING_ROLE


logger = logging.getLogger(__name__)

# ===== –í–´–ë–û–† –†–û–õ–ò =====
async def select_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –∏ –∑–∞–ø—Ä–æ—Å –§–ò–û."""
    query = update.callback_query
    await query.answer()
    lang = await get_user_language(str(update.effective_user.id))
    
    context.user_data['selected_role'] = query.data.replace('auth_', '')
    
    # FIXED: –î–æ–±–∞–≤–ª–µ–Ω parse_mode
    await query.edit_message_text(
        text=get_text('auth_prompt_name', lang),
        parse_mode=ParseMode.HTML
    )
    return GETTING_NAME

# ===== –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ú–ï–ù–ò –ò –ö–û–ù–¢–ê–ö–¢–ê =====
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –§–ò–û –∏ –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞."""
    lang = await get_user_language(str(update.effective_user.id))
    
    await clean_chat(context, update.effective_chat.id)
    await update.message.delete()

    user_input = update.message.text.strip()
    if ' ' not in user_input or len(user_input.split()) < 2:
        # FIXED: –î–æ–±–∞–≤–ª–µ–Ω parse_mode
        sent_message = await context.bot.send_message(
            update.effective_chat.id, 
            get_text('auth_error_name', lang),
            parse_mode=ParseMode.HTML
        )
        await track_message(context, sent_message)
        return GETTING_NAME
    
    parts = user_input.split(' ', 1)
    context.user_data.update({'first_name': parts[0], 'last_name': parts[1]})
    
    reply_markup = ReplyKeyboardMarkup(
        [[KeyboardButton(text=get_text('auth_contact_button', lang), request_contact=True)]],
        resize_keyboard=True, one_time_keyboard=True
    )
    # FIXED: –î–æ–±–∞–≤–ª–µ–Ω parse_mode
    sent_message = await context.bot.send_message(
        update.effective_chat.id, 
        get_text('auth_prompt_contact', lang), 
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    await track_message(context, sent_message)
    return GETTING_CONTACT

async def get_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É."""
    await clean_chat(context, update.effective_chat.id)
    await update.message.delete()
    
    temp_msg = await context.bot.send_message(update.effective_chat.id, "...", reply_markup=ReplyKeyboardRemove())
    await temp_msg.delete()

    if update.message.contact:
        context.user_data['phone_number'] = update.message.contact.phone_number

    role = context.user_data.get('selected_role')
    if role == 'manager':
        return await handle_manager_level(update, context, is_entry=True)
    else:
        return await show_disciplines_selection(update, context, is_entry=True)

# ===== –£–†–û–í–ï–ù–¨ –ú–ï–ù–ï–î–ñ–ï–†–ê –ò –í–´–ë–û–† –î–ò–°–¶–ò–ü–õ–ò–ù–´ =====
async def handle_manager_level(update: Update, context: ContextTypes.DEFAULT_TYPE, is_entry: bool = False):
    """–ó–∞–ø—Ä–æ—Å –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ä–æ–≤–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
    lang = await get_user_language(str(update.effective_user.id))
    
    if is_entry:
        keyboard = [
            [InlineKeyboardButton(get_text('auth_manager_level1', lang), callback_data="level_1")],
            [InlineKeyboardButton(get_text('auth_manager_level2', lang), callback_data="level_2")]
        ]
        # FIXED: –î–æ–±–∞–≤–ª–µ–Ω parse_mode
        await context.bot.send_message(
            update.effective_chat.id, 
            get_text('auth_prompt_manager_level', lang), 
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )
        return SELECTING_MANAGER_LEVEL
    
    query = update.callback_query
    await query.answer()
    level = int(query.data.replace('level_', ''))
    context.user_data['manager_level'] = level
    
    if level == 1:
        return await finalize_registration(update, context)
    else:
        return await show_disciplines_selection(update, context)


async def show_disciplines_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, is_entry: bool = False):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    lang = await get_user_language(str(update.effective_user.id))
    disciplines = await db_query("SELECT id, name FROM disciplines ORDER BY name")
    
    if not disciplines:
        await context.bot.send_message(update.effective_chat.id, "‚ùå –û—à–∏–±–∫–∞: –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return ConversationHandler.END

    keyboard = [[InlineKeyboardButton(name, callback_data=f"disc_{disc_id}")] for disc_id, name in disciplines]
    
    # FIXED: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ä–æ–ª–µ–π –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
    role_key = context.user_data.get('selected_role', '')
    role_map_loc = {
        'supervisor': '—Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–∞', 'master': '–º–∞—Å—Ç–µ—Ä–∞', 'manager': '–º–µ–Ω–µ–¥–∂–µ—Ä–∞',
        'foreman': '–±—Ä–∏–≥–∞–¥–∏—Ä–∞', 'kiok': '–ö–ò–û–ö', 'pto': '–ü–¢–û'
    }
    role_for_text = role_map_loc.get(role_key, role_key)
    
    text_template = get_text('auth_prompt_discipline', lang)
    text = text_template.format(role=role_for_text)

    # FIXED: –î–æ–±–∞–≤–ª–µ–Ω parse_mode –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if is_entry:
        await context.bot.send_message(update.effective_chat.id, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)
    else:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)
    
    return SELECTING_DISCIPLINE

# ===== –§–ò–ù–ê–õ–ò–ó–ê–¶–ò–Ø –ò –û–¢–ú–ï–ù–ê =====
async def handle_discipline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è."""
    query = update.callback_query
    await query.answer()
    context.user_data['discipline_id'] = query.data.replace('disc_', '')
    return await finalize_registration(update, context)

async def finalize_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω–∞–º."""
    user_id = str(update.effective_user.id)
    lang = await get_user_language(user_id)
    
    success = await AdminService.send_approval_request(context, context.user_data, user_id)
    
    if success:
        text = get_text('auth_pending_approval', lang)
    else:
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    query = update.callback_query
    # FIXED: –î–æ–±–∞–≤–ª–µ–Ω parse_mode
    await query.edit_message_text(text, parse_mode=ParseMode.HTML)
    return ConversationHandler.END


async def cancel_auth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    query = update.callback_query
    await query.answer("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    context.user_data.clear()
    
    from bot.handlers.common import back_to_start
    await back_to_start(update, context)
    return ConversationHandler.END

# ===== –°–û–ó–î–ê–ù–ò–ï CONVERSATION HANDLER =====
def create_auth_conversation():
    """–°–æ–∑–¥–∞–Ω–∏–µ ConversationHandler –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    return ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start_auth, pattern="^start_auth$")
        ],
        states={
            SELECTING_ROLE: [
                CallbackQueryHandler(select_role, pattern="^auth_")
            ],
            GETTING_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)
            ],
            GETTING_CONTACT: [
                MessageHandler(filters.CONTACT, get_contact)
            ],
            SELECTING_MANAGER_LEVEL: [
                CallbackQueryHandler(handle_manager_level, pattern="^level_")
            ],
            SELECTING_DISCIPLINE: [
                CallbackQueryHandler(handle_discipline, pattern="^disc_")
            ]
        },
        fallbacks=[
            CallbackQueryHandler(cancel_auth, pattern="^cancel_auth$")
        ],
        per_user=True, per_chat=True, per_message=False, allow_reentry=True, name="auth_conversation"
    )