"""
ConversationHandler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–∞–º–∏
"""

import json
import logging
from datetime import date
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ConversationHandler, CallbackQueryHandler, MessageHandler, 
    filters, ContextTypes
)

from telegram.constants import ParseMode
from services.workflow_service import WorkflowService
from services.notification_service import NotificationService

from utils.constants import (
    SELECTING_BRIGADE, GETTING_CORPUS_NEW, GETTING_WORK_TYPE_NEW,
    GETTING_PIPE_DATA, CONFIRM_REPORT_NEW
)
from utils.localization import get_user_language
from database.queries import db_query
from ..middleware.security import check_user_role

logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
GETTING_CORPUS = GETTING_CORPUS_NEW
GETTING_WORK_TYPE = GETTING_WORK_TYPE_NEW  
CONFIRM_REPORT = CONFIRM_REPORT_NEW
ITEMS_PER_PAGE = 8

# --- > –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–ê–ì–ò–ù–ê–¶–ò–ò <---
def create_paginated_keyboard(items: list[tuple[int, str]], page: int = 0, item_prefix: str = "") -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä—Ç–µ–∂–µ–π (id, name)."""
    start_index = page * ITEMS_PER_PAGE
    end_index = start_index + ITEMS_PER_PAGE
    page_items = items[start_index:end_index]

    # –í —Ç–µ–∫—Å—Ç–µ –∫–Ω–æ–ø–∫–∏ - –∏–º—è, –≤ callback_data - ID
    keyboard = [[InlineKeyboardButton(name, callback_data=f"{item_prefix}{item_id}")] for item_id, name in page_items]

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page - 1}"))
    if end_index < len(items):
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"page_{page + 1}"))

    if nav_buttons:
        keyboard.append(nav_buttons)

    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_report")])
    return InlineKeyboardMarkup(keyboard)

# ===== ENTRY POINT =====
async def start_report_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–æ–º"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(update.effective_user.id)
    user_role = await check_user_role(user_id)
    
    if not user_role.get('isSupervisor'):
        await query.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–∞–º", show_alert=True)
        return ConversationHandler.END
    
    try:
        # # CHANGED: –ó–∞–ø—Ä–æ—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ discipline_id
        supervisor_info = await db_query(
            "SELECT brigade_ids, discipline_id FROM supervisors WHERE user_id = %s",
            (user_id,)
        )
        if not supervisor_info:
            await query.edit_message_text("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return ConversationHandler.END
        
        assigned_brigades = supervisor_info[0][0] or []
        discipline_id = supervisor_info[0][1]
        
        context.user_data['supervisor_discipline_id'] = discipline_id
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–∞ {user_id}: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return ConversationHandler.END
    
    if not assigned_brigades:
        await query.edit_message_text("‚ùå –ó–∞ –≤–∞–º–∏ –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã –±—Ä–∏–≥–∞–¥—ã.")
        return ConversationHandler.END
    
    keyboard = [[InlineKeyboardButton(f"üë• {b}", callback_data=f"select_brigade_{b}")] for b in assigned_brigades]
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_report")])
    
    await query.edit_message_text(
        "üë• **–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–∏–≥–∞–¥—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞:**",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    
    return SELECTING_BRIGADE

# ===== –í–´–ë–û–† –ë–†–ò–ì–ê–î–´ =====
async def select_brigade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –±—Ä–∏–≥–∞–¥—ã"""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–∏–≥–∞–¥—ã
    brigade_name = query.data.replace('select_brigade_', '')
    context.user_data['report_data'] = {'selected_brigade': brigade_name}
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–æ—Ä–ø—É—Å–∞
    return await show_corpus_selection(update, context)

# ===== –í–´–ë–û–† –ö–û–†–ü–£–°–ê =====
async def show_corpus_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–ø—É—Å–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π, –∏—Å–ø–æ–ª—å–∑—É—è ID."""
    query = update.callback_query
    
    # –¢–µ–ø–µ—Ä—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏ ID, –∏ –∏–º—è
    corpus_results = await db_query("SELECT id, name FROM construction_objects ORDER BY display_order, name")
    if not corpus_results:
        await query.edit_message_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—ä–µ–∫—Ç—ã —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return ConversationHandler.END

    # corpus_list —Ç–µ–ø–µ—Ä—å —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π: [(1, '–ö–æ—Ä–ø—É—Å 1'), (2, '–ö–æ—Ä–ø—É—Å 2')]
    context.user_data['corpus_list'] = corpus_results 

    keyboard = create_paginated_keyboard(corpus_results, page, item_prefix="select_corpus_")
    text = "üè¢ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–ø—É—Å/–æ–±—ä–µ–∫—Ç:</b>"
    
    await query.edit_message_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    return GETTING_CORPUS

async def handle_corpus_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ '–í–ø–µ—Ä–µ–¥' –∏ '–ù–∞–∑–∞–¥'."""
    query = update.callback_query
    await query.answer()
    page = int(query.data.split('_')[1])
    
    corpus_list = context.user_data.get('corpus_list', [])
    if not corpus_list:
        return await show_corpus_selection(update, context, 0)

    keyboard = create_paginated_keyboard(corpus_list, page, item_prefix="select_corpus_")
    await query.edit_message_text("üè¢ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–ø—É—Å/–æ–±—ä–µ–∫—Ç:</b>", reply_markup=keyboard, parse_mode=ParseMode.HTML)
    
    return GETTING_CORPUS

async def select_corpus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ—Ä–ø—É—Å–∞ –ø–æ ID."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ callback_data
    corpus_id = query.data.replace('select_corpus_', '')
    
    # –ù–∞—Ö–æ–¥–∏–º –∏–º—è –∫–æ—Ä–ø—É—Å–∞ –ø–æ –µ–≥–æ ID
    corpus_info = await db_query("SELECT name FROM construction_objects WHERE id = %s", (corpus_id,))
    if not corpus_info:
        await query.edit_message_text("‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ—Ä–ø—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
        
    corpus_name = corpus_info[0][0]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ ID, –∏ –∏–º—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data['report_data']['corpus_id'] = corpus_id
    context.user_data['report_data']['corpus_name'] = corpus_name
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤–∏–¥–∞ —Ä–∞–±–æ—Ç (—ç—Ç–∞ –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π)
    return await show_work_types_for_discipline(update, context)

# ===== –í–´–ë–û–† –í–ò–î–ê –†–ê–ë–û–¢ (–¢–†–£–ë–û–ü–†–û–í–û–î) =====
async def show_work_types_for_discipline(update, context):
    """–ü–æ–∫–∞–∑ –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç –¥–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–∞"""
    query = update.callback_query
    
    # –ü–æ–ª—É—á–∞–µ–º discipline_id –∏–∑ context (—Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤ start_report_creation)
    discipline_id = context.user_data.get('supervisor_discipline_id')
    
    if not discipline_id:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É.")
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    discipline_info = await db_query("SELECT name FROM disciplines WHERE id = %s", (discipline_id,))
    if not discipline_info:
        await query.edit_message_text("‚ùå –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ConversationHandler.END
    
    discipline_name = discipline_info[0][0]
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥—ã —Ä–∞–±–æ—Ç –¥–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
    work_types = db_query(
        "SELECT id, name, unit_of_measure FROM work_types WHERE discipline_id = %s ORDER BY display_order, name",
        (discipline_id,)
    )
    
    if not work_types:
        await query.edit_message_text(f"‚ùå –í–∏–¥—ã —Ä–∞–±–æ—Ç –¥–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã '{discipline_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ConversationHandler.END
    
    text = f"üîß **–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç ({discipline_name}):**"
    keyboard = []
    
    for work_id, work_name, unit in work_types:
        unit_text = f" ({unit})" if unit else ""
        keyboard.append([InlineKeyboardButton(f"{work_name}{unit_text}", callback_data=f"select_work_{work_id}")])
    
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_report")])
    
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    
    return GETTING_WORK_TYPE

async def select_work_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –≤–∏–¥–∞ —Ä–∞–±–æ—Ç"""
    query = update.callback_query
    await query.answer()
    
    work_id = query.data.replace('select_work_', '')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ —Ä–∞–±–æ—Ç
    work_info = await db_query("SELECT name, unit_of_measure, norm_per_unit FROM work_types WHERE id = %s", (work_id,))
    if not work_info:
        await query.edit_message_text("‚ùå –í–∏–¥ —Ä–∞–±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    
    work_name, unit, norm = work_info[0]
    
    context.user_data['report_data'].update({
        'work_type_id': work_id,
        'work_type_name': work_name,
        'unit_of_measure': unit,
        'norm_per_unit': norm or 1.0
    })
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–∞
    return await show_pipe_data_form(update, context)

# ===== –§–û–†–ú–ê –î–ê–ù–ù–´–• –¢–†–£–ë–û–ü–†–û–í–û–î–ê =====
async def show_pipe_data_form(update, context):
    """–ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥—É"""
    query = update.callback_query
    
    report_data = context.user_data['report_data']
    
    form_text = (
        f"üìã **–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞**\n\n"
        f"üë• –ë—Ä–∏–≥–∞–¥–∞: {report_data['selected_brigade']}\n"
        f"üèóÔ∏è –ö–æ—Ä–ø—É—Å: {report_data['corpus_name']}\n"
        f"üîß –†–∞–±–æ—Ç—ã: {report_data['work_type_name']}\n\n"
        f"üìù **–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:**\n"
        f"1. –î–∏–∞–º–µ—Ç—Ä —Ç—Ä—É–±—ã (–º–º)\n"
        f"2. –î–ª–∏–Ω–∞ —É—á–∞—Å—Ç–∫–∞ (–º)\n"
        f"3. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–∞—Ä—â–∏–∫–æ–≤\n"
        f"4. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω—Ç–∞–∂–Ω–∏–∫–æ–≤\n"
        f"5. –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n\n"
        f"**–ü—Ä–∏–º–µ—Ä:** 100, 50.5, 2, 3, –ë–µ–∑ –∑–∞–º–µ—á–∞–Ω–∏–π"
    )
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_report")]]
    
    await query.edit_message_text(form_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    
    return GETTING_PIPE_DATA

async def process_pipe_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–∞"""
    user_input = update.message.text.strip()
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update.message.delete()
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        parts = [part.strip() for part in user_input.split(',')]
        
        if len(parts) < 4:
            await update.message.reply_text(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 4 –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_report")]])
            )
            return GETTING_PIPE_DATA
        
        diameter = float(parts[0])
        length = float(parts[1])
        welders_count = int(parts[2])
        fitters_count = int(parts[3])
        notes = parts[4] if len(parts) > 4 else ""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data['report_data'].update({
            'pipe_diameter': diameter,
            'pipe_length': length,
            'welders_count': welders_count,
            'fitters_count': fitters_count,
            'total_people': welders_count + fitters_count,
            'notes': notes,
            'report_date': date.today().strftime('%Y-%m-%d')
        })
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        return await show_report_confirmation(update, context)
        
    except (ValueError, IndexError) as e:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_report")]])
        )
        return GETTING_PIPE_DATA

# ===== –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï =====
async def show_report_confirmation(update, context):
    """–ü–æ–∫–∞–∑ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    report_data = context.user_data['report_data']
    
    confirmation_text = (
        f"‚úÖ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞**\n\n"
        f"üë• –ë—Ä–∏–≥–∞–¥–∞: {report_data['selected_brigade']}\n"
        f"üèóÔ∏è –ö–æ—Ä–ø—É—Å: {report_data['corpus_name']}\n"
        f"üîß –†–∞–±–æ—Ç—ã: {report_data['work_type_name']}\n"
        f"üìè –î–∏–∞–º–µ—Ç—Ä: {report_data['pipe_diameter']} –º–º\n"
        f"üìê –î–ª–∏–Ω–∞: {report_data['pipe_length']} –º\n"
        f"üë®‚Äçüîß –°–≤–∞—Ä—â–∏–∫–∏: {report_data['welders_count']} —á–µ–ª.\n"
        f"üîß –ú–æ–Ω—Ç–∞–∂–Ω–∏–∫–∏: {report_data['fitters_count']} —á–µ–ª.\n"
        f"üë• –í—Å–µ–≥–æ: {report_data['total_people']} —á–µ–ª.\n"
        f"üìÖ –î–∞—Ç–∞: {report_data['report_date']}\n"
    )
    
    if report_data.get('notes'):
        confirmation_text += f"üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {report_data['notes']}\n"
    
    confirmation_text += "\n**–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç?**"
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="submit_report")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_report")]
    ]
    
    await update.message.reply_text(confirmation_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    
    return CONFIRM_REPORT

async def submit_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ –ë–î —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ workflow"""
    query = update.callback_query
    await query.answer("–°–æ—Ö—Ä–∞–Ω—è—é –æ—Ç—á–µ—Ç...")
    
    user_id = str(update.effective_user.id)
    report_data = context.user_data.get('report_data', {})

    if not report_data:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ —É—Ç–µ—Ä—è–Ω—ã.")
        context.user_data.clear()
        return ConversationHandler.END

    try:
        # # CHANGED: –ü–æ–ª—É—á–∞–µ–º discipline_id –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        discipline_id = context.user_data.get('supervisor_discipline_id')
        if not discipline_id:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É.")
            return ConversationHandler.END
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        details_for_json = {
            'pipe_diameter': report_data.get('pipe_diameter'),
            'pipe_length': report_data.get('pipe_length'),
            'welders_count': report_data.get('welders_count'),
            'fitters_count': report_data.get('fitters_count')
        }
        
        report_payload = {
            'report_date': report_data.get('report_date'),
            'brigade_name': report_data.get('selected_brigade'),
            'corpus_name': report_data.get('corpus_name'),
            'work_type_name': report_data.get('work_type_name'),
            'details': { 'pipe_diameter': report_data.get('pipe_diameter') } # –ü—Ä–∏–º–µ—Ä
        }
        
        # # CHANGED: –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ WorkflowService
        report_id = await WorkflowService.create_report(
            supervisor_id=user_id,
            discipline_id=discipline_id,
            report_data=report_payload
        )
        
        if report_id:
            try:
                # 1. –ü–æ–ª—É—á–∞–µ–º –∏–º—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –ø–æ –µ–µ ID
                discipline_name_result = await db_query("SELECT name FROM disciplines WHERE id = %s", (discipline_id,))
                
                if discipline_name_result:
                    discipline_name = discipline_name_result[0][0]
                    
                    # 2. –í—ã–∑—ã–≤–∞–µ–º –°–£–©–ï–°–¢–í–£–Æ–©–£–Æ —Ñ—É–Ω–∫—Ü–∏—é —Å –ò–ú–ï–ù–ï–ú –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
                    masters = await NotificationService.get_users_for_discipline_notification(discipline_name, 'master')
                    
                    for master_id in masters:
                        await NotificationService.notify_master_new_report(context, report_id, master_id)
                    
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –æ—Ç—á–µ—Ç–µ {report_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {len(masters)} –º–∞—Å—Ç–µ—Ä–∞–º")
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–º—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –¥–ª—è ID {discipline_id}, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–∞—Å—Ç–µ—Ä–∞–º: {e}")
            
            success_text = f"‚úÖ **–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω!**\nID: {report_id}\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–∞—Å—Ç–µ—Ä—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]]
            await query.edit_message_text(success_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
            
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –≤ –ë–î.")
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.")
    
    context.user_data.clear()
    return ConversationHandler.END

# ===== –û–¢–ú–ï–ù–ê =====
async def cancel_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
    query = update.callback_query
    await query.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    from ..handlers.common import back_to_start
    await back_to_start(update, context)
    
    context.user_data.clear()
    return ConversationHandler.END

# ===== –°–û–ó–î–ê–ù–ò–ï CONVERSATION HANDLER =====
def create_report_conversation():
    """–°–æ–∑–¥–∞–Ω–∏–µ ConversationHandler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤"""
    # –≠—Ç–æ—Ç –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    return ConversationHandler(
        entry_points=[CallbackQueryHandler(start_report_creation, pattern="^new_report$")],
        states={
            SELECTING_BRIGADE: [CallbackQueryHandler(select_brigade, pattern="^select_brigade_")],
            GETTING_CORPUS: [
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∫–Ω–æ–ø–∫–∞ –ª–∏ —ç—Ç–æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                CallbackQueryHandler(handle_corpus_pagination, pattern="^page_"),
                # –ï—Å–ª–∏ –Ω–µ—Ç - –∑–Ω–∞—á–∏—Ç, —ç—Ç–æ –≤—ã–±–æ—Ä –∫–æ—Ä–ø—É—Å–∞
                CallbackQueryHandler(select_corpus, pattern="^select_corpus_")
            ],
            GETTING_WORK_TYPE: [CallbackQueryHandler(select_work_type, pattern="^select_work_")],
            GETTING_PIPE_DATA: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_pipe_data)],
            CONFIRM_REPORT: [CallbackQueryHandler(submit_report, pattern="^submit_report$")]
        },
        fallbacks=[CallbackQueryHandler(cancel_report, pattern="^cancel_report$")],
        per_user=True, allow_reentry=True, name="report_conversation"
    )
