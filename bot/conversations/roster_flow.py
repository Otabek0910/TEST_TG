# bot/conversations/roster_flow.py

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, ConversationHandler, CallbackQueryHandler, MessageHandler, filters, CommandHandler

from bot.middleware.security import check_user_role
from services.roster_service import RosterService
from utils.chat_utils import auto_clean
from utils.localization import get_user_language, get_text
from utils.constants import AWAITING_ROLES_COUNT, CONFIRM_ROSTER, CONFIRM_DANGEROUS_ROSTER_SAVE

logger = logging.getLogger(__name__)

@auto_clean
async def start_roster_submission(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –ø–æ–¥–∞—á–∏ —Ç–∞–±–µ–ª—è (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞)"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    user_role = await check_user_role(user_id)
    lang = await get_user_language(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –±—Ä–∏–≥–∞–¥–∏—Ä
    if not (user_role.get('isForeman') or user_role.get('isBrigade')):
        await query.edit_message_text("‚õîÔ∏è –¢–æ–ª—å–∫–æ –±—Ä–∏–≥–∞–¥–∏—Ä—ã –º–æ–≥—É—Ç –ø–æ–¥–∞–≤–∞—Ç—å —Ç–∞–±–µ–ª–∏.")
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∞–±–µ–ª—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    roster_status = await RosterService.get_roster_status(user_id)
    
    if roster_status['exists']:
        total_people = roster_status['total_people']
        details = roster_status['details']
        
        details_text = "\n".join([f"  - {role}: {count} —á–µ–ª." for role, count in details.items()])
        
        text = (
            f"‚úÖ **–¢–∞–±–µ–ª—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –ø–æ–¥–∞–Ω**\n\n"
            f"üìä **–ò—Ç–æ–≥–æ –ª—é–¥–µ–π:** {total_people}\n\n"
            f"**–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:**\n{details_text}\n\n"
            f"–•–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∞–±–µ–ª—å? (—Å—Ç–∞—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω)"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìù –ü–æ–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="roster_submit_new")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_start")]
        ]
        
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN)
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏
    available_roles = await RosterService.get_available_roles()
    
    if not available_roles:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Ä–æ–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data['available_roles'] = available_roles
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–∏–º–µ—Ä–æ–º
    roles_list = "\n".join([f"  - {role['name']}" for role in available_roles])
    
    text = (
        f"üìã **–ü–æ–¥–∞—á–∞ —Ç–∞–±–µ–ª—è —É—á–µ—Ç–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏**\n\n"
        f"**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:**\n{roles_list}\n\n"
        f"**–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –ø–æ —Ä–æ–ª—è–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ:**\n"
        f"`–°–≤–∞—Ä—â–∏–∫ 6 —Ä–∞–∑—Ä—è–¥–∞ 3`\n"
        f"`–ü–æ–º–æ—â–Ω–∏–∫ —Å–≤–∞—Ä—â–∏–∫–∞ 2`\n"
        f"`–°–ª–µ—Å–∞—Ä—å-–º–æ–Ω—Ç–∞–∂–Ω–∏–∫ 1`\n\n"
        f"üí° –û–¥–Ω–∞ —Ä–æ–ª—å –Ω–∞ —Å—Ç—Ä–æ–∫—É, –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫."
    )
    
    await query.edit_message_text(text, parse_mode=ParseMode.MARKDOWN)
    return AWAITING_ROLES_COUNT

@auto_clean
async def process_roles_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ä–æ–ª–µ–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞)"""
    user_input = update.message.text
    user_id = str(update.effective_user.id)
    lang = await get_user_language(user_id)
    
    available_roles = context.user_data.get('available_roles', [])
    
    # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥
    parsed_roles = RosterService.parse_roles_input(user_input, available_roles)
    
    if not parsed_roles:
        await update.message.reply_text(
            "‚ùå **–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞**\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥. –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
            "`–°–≤–∞—Ä—â–∏–∫ 6 —Ä–∞–∑—Ä—è–¥–∞ 3`\n"
            "`–ü–æ–º–æ—â–Ω–∏–∫ —Å–≤–∞—Ä—â–∏–∫–∞ 2`\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode=ParseMode.MARKDOWN
        )
        return AWAITING_ROLES_COUNT
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
    roster_summary = RosterService.calculate_roster_summary(parsed_roles)
    context.user_data['roster_summary'] = roster_summary
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    total_people = roster_summary['total']
    details_text = "\n".join([f"  - **{role}**: {count} —á–µ–ª." for role, count in parsed_roles.items()])
    
    summary_text = (
        f"üìä **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–∞–±–µ–ª—è**\n\n"
        f"**–í—Å–µ–≥–æ –ª—é–¥–µ–π:** {total_people}\n\n"
        f"**–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:**\n{details_text}\n\n"
        f"–í—Å–µ –≤–µ—Ä–Ω–æ?"
    )

    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm_roster")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_roster")]
    ]
    
    await update.message.reply_text(summary_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN)
    return CONFIRM_ROSTER

@auto_clean
async def confirm_roster_save(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–∞–±–µ–ª—å (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞)"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    user_role = await check_user_role(user_id)
    lang = await get_user_language(user_id)
    
    roster_summary = context.user_data.get('roster_summary')
    
    if not roster_summary:
        await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ —Ç–∞–±–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–∏–≥–∞–¥—ã
    brigade_name = user_role.get('brigadeName') or f"–ë—Ä–∏–≥–∞–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
    total_people_new = roster_summary['total']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    safety_check = await RosterService.check_roster_safety(user_id, total_people_new, brigade_name)
    
    if safety_check['is_safe']:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        reserve = safety_check['reserve']
        
        if RosterService.save_roster(user_id, roster_summary):
            greeting_text = (
                f"‚úÖ **–¢–∞–±–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!**\n\n"
                f"üë• –í—Å–µ–≥–æ –ª—é–¥–µ–π: **{total_people_new}**\n"
                f"üìä –†–µ–∑–µ—Ä–≤: **{reserve} —á–µ–ª.**"
            )
        else:
            greeting_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–∞–±–µ–ª—è."
        
        context.user_data.clear()
        await query.edit_message_text(greeting_text, parse_mode=ParseMode.MARKDOWN)
        return ConversationHandler.END
    else:
        # –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        total_assigned = safety_check['total_assigned']
        
        warning_text = (
            f"‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!**\n\n"
            f"–ù–æ–≤—ã–π —Ç–∞–±–µ–ª—å: **{total_people_new} —á–µ–ª.**\n"
            f"–£–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –≤ –æ—Ç—á–µ—Ç–∞—Ö: **{total_assigned} —á–µ–ª.**\n\n"
            f"üí° –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∞–±–µ–ª—è **—É–¥–∞–ª–∏—Ç –≤—Å–µ –æ—Ç—á–µ—Ç—ã** –∑–∞ —Å–µ–≥–æ–¥–Ω—è!\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚ö†Ô∏è –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ", callback_data="force_save_roster")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_roster")]
        ]
        
        await query.edit_message_text(warning_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN)
        return CONFIRM_DANGEROUS_ROSTER_SAVE

@auto_clean
async def force_save_roster(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–∞–±–µ–ª—å, —É–¥–∞–ª—è—è –æ—Ç—á–µ—Ç—ã (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞)"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    user_role = await check_user_role(user_id)
    lang = await get_user_language(user_id)
    
    roster_summary = context.user_data.get('roster_summary')
    brigade_name = user_role.get('brigadeName') or f"–ë—Ä–∏–≥–∞–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
    
    if await RosterService.force_save_with_reports_deletion(user_id, roster_summary, brigade_name):
        greeting_text = (
            f"‚úÖ **–¢–∞–±–µ–ª—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!**\n\n"
            f"‚ö†Ô∏è –û—Ç—á–µ—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.\n"
            f"üë• –í—Å–µ–≥–æ –ª—é–¥–µ–π: **{roster_summary['total']}**"
        )
    else:
        greeting_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏."
    
    context.user_data.clear()
    await query.edit_message_text(greeting_text, parse_mode=ParseMode.MARKDOWN)
    return ConversationHandler.END

@auto_clean
async def cancel_roster_submission(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø–æ–¥–∞—á—É —Ç–∞–±–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    lang = await get_user_language(str(query.from_user.id))
    
    context.user_data.clear()
    await query.edit_message_text("‚ùå –ü–æ–¥–∞—á–∞ —Ç–∞–±–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

@auto_clean
async def restart_roster_submission(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–¥–∞—á—É —Ç–∞–±–µ–ª—è (–¥–ª—è —Å–ª—É—á–∞—è –∑–∞–º–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ)"""
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
    context.user_data.clear()
    return await start_roster_submission(update, context)

def create_roster_conversation() -> ConversationHandler:
    """–°–æ–∑–¥–∞–µ—Ç ConversationHandler –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç–∞–±–µ–ª–µ–π"""
    return ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start_roster_submission, pattern="^submit_roster$"),
            CallbackQueryHandler(restart_roster_submission, pattern="^roster_submit_new$")
        ],
        states={
            AWAITING_ROLES_COUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_roles_input)
            ],
            CONFIRM_ROSTER: [
                CallbackQueryHandler(confirm_roster_save, pattern="^confirm_roster$")
            ],
            CONFIRM_DANGEROUS_ROSTER_SAVE: [
                CallbackQueryHandler(force_save_roster, pattern="^force_save_roster$")
            ],
        },
        fallbacks=[
            CallbackQueryHandler(cancel_roster_submission, pattern="^cancel_roster$"),
            CommandHandler('start', lambda u, c: ConversationHandler.END)
        ],
        per_user=True,
    )