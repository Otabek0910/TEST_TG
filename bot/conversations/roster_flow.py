# bot/conversations/roster_flow.py

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, ConversationHandler, CallbackQueryHandler, MessageHandler, filters, CommandHandler

from bot.middleware.security import check_user_role
from services.roster_service import RosterService
from utils.chat_utils import auto_clean
from utils.localization import get_user_language, get_text

# FIXED: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –í–°–ï–• –∫–æ–Ω—Å—Ç–∞–Ω—Ç
from utils.constants import (
    AWAITING_ROLES_COUNT, CONFIRM_ROSTER, CONFIRM_DANGEROUS_ROSTER_SAVE,
    AWAITING_MODE_SELECTION, INTERACTIVE_ROSTER_EDIT
)

logger = logging.getLogger(__name__)

@auto_clean
async def start_roster_submission(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –ø–æ–¥–∞—á–∏ —Ç–∞–±–µ–ª—è - –í–´–ë–û–† –†–ï–ñ–ò–ú–ê"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    user_role = check_user_role(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –±—Ä–∏–≥–∞–¥–∏—Ä
    if not (user_role.get('isForeman') or user_role.get('isBrigade')):
        await query.edit_message_text("‚õîÔ∏è –¢–æ–ª—å–∫–æ –±—Ä–∏–≥–∞–¥–∏—Ä—ã –º–æ–≥—É—Ç –ø–æ–¥–∞–≤–∞—Ç—å —Ç–∞–±–µ–ª–∏.")
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∞–±–µ–ª—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞)
    roster_status = await RosterService.get_roster_status(user_id)
    
    if roster_status['exists']:
        total_people = roster_status['total_people']
        details = roster_status['details']
        
        details_text = "\n".join([f"  - {role}: {count} —á–µ–ª." for role, count in details.items()])
        
        text = (
            f"‚úÖ **–¢–∞–±–µ–ª—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –ø–æ–¥–∞–Ω**\n\n"
            f"üìä **–ò—Ç–æ–≥–æ –ª—é–¥–µ–π:** {total_people}\n\n"
            f"**–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:**\n{details_text}\n\n"
            f"–•–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∞–±–µ–ª—å? (—Å—Ç–∞—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω)"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìù –ü–æ–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="roster_submit_new")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_start")]
        ]
        
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN)
        return ConversationHandler.END
    
    # –î–û–ë–ê–í–õ–Ø–ï–ú: –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø–æ–¥–∞—á–∏ —Ç–∞–±–µ–ª—è
    keyboard = [
        [InlineKeyboardButton("üéØ –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º (–∫–Ω–æ–ø–∫–∏)", callback_data="roster_mode_interactive")],
        [InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º", callback_data="roster_mode_text")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ]
    
    await query.edit_message_text(
        "üìã **–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥–∞—á–∏ —Ç–∞–±–µ–ª—è:**\n\n"
        "üéØ **–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º** - –∫–Ω–æ–ø–∫–∏ +/- –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏\n"
        "üìù **–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º** - –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )
    
    return AWAITING_MODE_SELECTION 

async def select_roster_mode(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –ø–æ–¥–∞—á–∏ —Ç–∞–±–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "roster_mode_interactive":
        return await start_interactive_mode(update, context)
    elif query.data == "roster_mode_text":
        return await start_text_mode(update, context)
    else:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º")
        return ConversationHandler.END

    
async def start_interactive_mode(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    query = update.callback_query
    user_id = str(query.from_user.id)
    
    # FIXED: –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –î–õ–Ø –î–ò–°–¶–ò–ü–õ–ò–ù–´ –±—Ä–∏–≥–∞–¥–∏—Ä–∞
    available_roles = await RosterService.get_available_roles(user_id)
    
    if not available_roles:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Ä–æ–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –¥–ª—è –≤–∞—à–µ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.")
        return ConversationHandler.END
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–µ–π –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
    if len(available_roles) > 8:
        available_roles = available_roles[:8]
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Ä–æ–ª–µ–π
    context.user_data['roster_counts'] = {role['id']: 0 for role in available_roles}
    context.user_data['available_roles'] = available_roles
    
    return await show_interactive_roster_edit(update, context)

async def start_text_mode(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—É—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞)"""
    query = update.callback_query
    user_id = str(query.from_user.id)
    
    # FIXED: –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –î–õ–Ø –î–ò–°–¶–ò–ü–õ–ò–ù–´ –±—Ä–∏–≥–∞–¥–∏—Ä–∞
    available_roles = await RosterService.get_available_roles(user_id)
    
    if not available_roles:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Ä–æ–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –¥–ª—è –≤–∞—à–µ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.")
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data['available_roles'] = available_roles
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–∏–º–µ—Ä–æ–º
    discipline_name = available_roles[0]['discipline'] if available_roles else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'
    roles_list = "\n".join([f"  - {role['name']}" for role in available_roles])
    
    text = (
        f"üìã **–ü–æ–¥–∞—á–∞ —Ç–∞–±–µ–ª—è –¥–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã ¬´{discipline_name}¬ª**\n\n"
        f"**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:**\n{roles_list}\n\n"
        f"**–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –ø–æ —Ä–æ–ª—è–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ:**\n"
        f"`–°–≤–∞—Ä—â–∏–∫ 6 —Ä–∞–∑—Ä—è–¥–∞ 3`\n"
        f"`–ü–æ–º–æ—â–Ω–∏–∫ —Å–≤–∞—Ä—â–∏–∫–∞ 2`\n\n"
        f"üí° –û–¥–Ω–∞ —Ä–æ–ª—å –Ω–∞ —Å—Ç—Ä–æ–∫—É, –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫."
    )
    
    await query.edit_message_text(text, parse_mode=ParseMode.MARKDOWN)
    return AWAITING_ROLES_COUNT

async def show_interactive_roster_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ö–û–ú–ü–ê–ö–¢–ù–û–ï –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ —Ç–∞–±–µ–ª—è"""
    query = update.callback_query if hasattr(update, 'callback_query') and update.callback_query else None
    
    available_roles = context.user_data.get('available_roles', [])
    roster_counts = context.user_data.get('roster_counts', {})
    
    if not available_roles:
        if query:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ä–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return ConversationHandler.END
    
    # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    discipline_name = available_roles[0]['discipline'] if available_roles else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'
    
    text_lines = [f"üìã *–¢–∞–±–µ–ª—å: {discipline_name}*\n"]
    
    total_people = 0
    for role in available_roles:
        role_id = role['id']
        count = roster_counts.get(role_id, 0)
        total_people += count
        
        # –°–æ–∫—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
        short_name = role['name']
        if len(short_name) > 20:
            short_name = short_name[:17] + "..."
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        status_emoji = "‚úÖ" if count > 0 else "‚ö™"
        text_lines.append(f"{status_emoji} {short_name}: *{count}*")
    
    text_lines.append(f"\nüë• *–ò—Ç–æ–≥–æ: {total_people} —á–µ–ª.*")
    
    # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å–µ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ 2x3
    keyboard = []
    
    for i in range(0, len(available_roles), 2):
        row = []
        
        # –ü–µ—Ä–≤–∞—è —Ä–æ–ª—å –≤ —Å—Ç—Ä–æ–∫–µ
        role1 = available_roles[i]
        count1 = roster_counts.get(role1['id'], 0)
        role1_short = role1['name'][:8] + "..." if len(role1['name']) > 8 else role1['name']
        
        row.extend([
            InlineKeyboardButton("‚ûñ", callback_data=f"r-_{role1['id']}"),
            InlineKeyboardButton(f"{role1_short}:{count1}", callback_data=f"r_info_{role1['id']}"),
            InlineKeyboardButton("‚ûï", callback_data=f"r+_{role1['id']}")
        ])
        
        # –í—Ç–æ—Ä–∞—è —Ä–æ–ª—å –≤ —Å—Ç—Ä–æ–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if i + 1 < len(available_roles):
            role2 = available_roles[i + 1]
            count2 = roster_counts.get(role2['id'], 0)
            role2_short = role2['name'][:8] + "..." if len(role2['name']) > 8 else role2['name']
            
            row.extend([
                InlineKeyboardButton("‚ûñ", callback_data=f"r-_{role2['id']}"),
                InlineKeyboardButton(f"{role2_short}:{count2}", callback_data=f"r_info_{role2['id']}"),
                InlineKeyboardButton("‚ûï", callback_data=f"r+_{role2['id']}")
            ])
        
        keyboard.append(row)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    control_row = []
    if total_people > 0:
        control_row.append(InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="r_save"))
    control_row.append(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="r_cancel"))
    keyboard.append(control_row)
    
    text = "\n".join(text_lines)
    
    if query:
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    else:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    
    return INTERACTIVE_ROSTER_EDIT

async def handle_roster_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ +/- –≤ —Ç–∞–±–µ–ª–µ"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    roster_counts = context.user_data.get('roster_counts', {})
    
    # FIXED: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if data.startswith('r+_'):
        role_id = int(data.replace('r+_', ''))
        if role_id in roster_counts:
            if roster_counts[role_id] < 20:  # –º–∞–∫—Å–∏–º—É–º 20 —á–µ–ª–æ–≤–µ–∫
                roster_counts[role_id] += 1
                context.user_data['roster_counts'] = roster_counts
        
    elif data.startswith('r-_'):
        role_id = int(data.replace('r-_', ''))
        if role_id in roster_counts:
            if roster_counts[role_id] > 0:
                roster_counts[role_id] -= 1
                context.user_data['roster_counts'] = roster_counts
                
    elif data == 'r_save':
        return await save_interactive_roster(update, context)
        
    elif data == 'r_cancel':
        await query.edit_message_text("‚ùå –ü–æ–¥–∞—á–∞ —Ç–∞–±–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('roster_counts', None)
        context.user_data.pop('available_roles', None)
        return ConversationHandler.END
        
    elif data.startswith('r_info_'):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
        role_id = int(data.replace('r_info_', ''))
        available_roles = context.user_data.get('available_roles', [])
        role = next((r for r in available_roles if r['id'] == role_id), None)
        if role:
            await query.answer(f"üìã {role['name']}", show_alert=True)
        return INTERACTIVE_ROSTER_EDIT
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    return await show_interactive_roster_edit(update, context)

async def save_interactive_roster(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–∞–±–µ–ª—å –∏–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    query = update.callback_query
    user_id = str(query.from_user.id)
    
    available_roles = context.user_data.get('available_roles', [])
    roster_counts = context.user_data.get('roster_counts', {})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    parsed_roles = {}
    for role in available_roles:
        count = roster_counts.get(role['id'], 0)
        if count > 0:
            parsed_roles[role['name']] = count
    
    if not parsed_roles:
        await query.answer("‚ùå –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–æ–ª—å!", show_alert=True)
        return INTERACTIVE_ROSTER_EDIT
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ RosterService
    roster_summary = RosterService.calculate_roster_summary(parsed_roles)
    success = await RosterService.save_roster(user_id, roster_summary)
    
    if success:
        total_people = roster_summary['total']
        details_text = "\n".join([f"‚Ä¢ {role}: {count}" for role, count in parsed_roles.items()])
        
        await query.edit_message_text(
            f"‚úÖ *–¢–∞–±–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!*\n\n"
            f"üë• *–í—Å–µ–≥–æ: {total_people} —á–µ–ª.*\n\n"
            f"*–°–æ—Å—Ç–∞–≤:*\n{details_text}",
            parse_mode='Markdown'
        )
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return INTERACTIVE_ROSTER_EDIT
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    context.user_data.pop('roster_counts', None)
    context.user_data.pop('available_roles', None)
    
    return ConversationHandler.END

@auto_clean
async def process_roles_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ä–æ–ª–µ–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    user_input = update.message.text
    user_id = str(update.effective_user.id)
    lang = await get_user_language(user_id)
    
    available_roles = context.user_data.get('available_roles', [])
    
    # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥
    parsed_roles = RosterService.parse_roles_input(user_input, available_roles)
    
    if not parsed_roles:
        await update.message.reply_text(
            "‚ùå **–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞**\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥. –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
            "`–°–≤–∞—Ä—â–∏–∫ 6 —Ä–∞–∑—Ä—è–¥–∞ 3`\n"
            "`–ü–æ–º–æ—â–Ω–∏–∫ —Å–≤–∞—Ä—â–∏–∫–∞ 2`\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode=ParseMode.MARKDOWN
        )
        return AWAITING_ROLES_COUNT
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
    roster_summary = RosterService.calculate_roster_summary(parsed_roles)
    context.user_data['roster_summary'] = roster_summary
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    total_people = roster_summary['total']
    details_text = "\n".join([f"  - **{role}**: {count} —á–µ–ª." for role, count in parsed_roles.items()])
    
    summary_text = (
        f"üìä **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–∞–±–µ–ª—è**\n\n"
        f"**–í—Å–µ–≥–æ –ª—é–¥–µ–π:** {total_people}\n\n"
        f"**–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:**\n{details_text}\n\n"
        f"–í—Å–µ –≤–µ—Ä–Ω–æ?"
    )

    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm_roster")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_roster")]
    ]
    
    await update.message.reply_text(summary_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN)
    return CONFIRM_ROSTER

@auto_clean
async def confirm_roster_save(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–∞–±–µ–ª—å"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    user_role = check_user_role(user_id)  # FIXED: —É–±–∏—Ä–∞–µ–º await
    lang = await get_user_language(user_id)
    
    roster_summary = context.user_data.get('roster_summary')
    
    if not roster_summary:
        await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ —Ç–∞–±–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–∏–≥–∞–¥—ã
    brigade_name = user_role.get('brigadeName') or f"–ë—Ä–∏–≥–∞–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
    total_people_new = roster_summary['total']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    safety_check = await RosterService.check_roster_safety(user_id, total_people_new, brigade_name)
    
    if safety_check['is_safe']:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        reserve = safety_check['reserve']
        
        if await RosterService.save_roster(user_id, roster_summary):  # FIXED: –¥–æ–±–∞–≤–ª—è–µ–º await
            greeting_text = (
                f"‚úÖ **–¢–∞–±–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!**\n\n"
                f"üë• –í—Å–µ–≥–æ –ª—é–¥–µ–π: **{total_people_new}**\n"
                f"üìä –†–µ–∑–µ—Ä–≤: **{reserve} —á–µ–ª.**"
            )
        else:
            greeting_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–∞–±–µ–ª—è."
        
        context.user_data.clear()
        await query.edit_message_text(greeting_text, parse_mode=ParseMode.MARKDOWN)
        return ConversationHandler.END
    else:
        # –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        total_assigned = safety_check['total_assigned']
        
        warning_text = (
            f"‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!**\n\n"
            f"–ù–æ–≤—ã–π —Ç–∞–±–µ–ª—å: **{total_people_new} —á–µ–ª.**\n"
            f"–£–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –≤ –æ—Ç—á–µ—Ç–∞—Ö: **{total_assigned} —á–µ–ª.**\n\n"
            f"üí° –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∞–±–µ–ª—è **—É–¥–∞–ª–∏—Ç –≤—Å–µ –æ—Ç—á–µ—Ç—ã** –∑–∞ —Å–µ–≥–æ–¥–Ω—è!\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚ö†Ô∏è –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ", callback_data="force_save_roster")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_roster")]
        ]
        
        await query.edit_message_text(warning_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN)
        return CONFIRM_DANGEROUS_ROSTER_SAVE

@auto_clean
async def force_save_roster(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–∞–±–µ–ª—å, —É–¥–∞–ª—è—è –æ—Ç—á–µ—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    user_role = check_user_role(user_id)  # FIXED: —É–±–∏—Ä–∞–µ–º await
    lang = await get_user_language(user_id)
    
    roster_summary = context.user_data.get('roster_summary')
    brigade_name = user_role.get('brigadeName') or f"–ë—Ä–∏–≥–∞–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
    
    if await RosterService.force_save_with_reports_deletion(user_id, roster_summary, brigade_name):
        greeting_text = (
            f"‚úÖ **–¢–∞–±–µ–ª—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!**\n\n"
            f"‚ö†Ô∏è –û—Ç—á–µ—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.\n"
            f"üë• –í—Å–µ–≥–æ –ª—é–¥–µ–π: **{roster_summary['total']}**"
        )
    else:
        greeting_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏."
    
    context.user_data.clear()
    await query.edit_message_text(greeting_text, parse_mode=ParseMode.MARKDOWN)
    return ConversationHandler.END

@auto_clean
async def cancel_roster_submission(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø–æ–¥–∞—á—É —Ç–∞–±–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    
    context.user_data.clear()
    await query.edit_message_text("‚ùå –ü–æ–¥–∞—á–∞ —Ç–∞–±–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END
@auto_clean
async def restart_roster_submission(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–¥–∞—á—É —Ç–∞–±–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
    context.user_data.clear()
    return await start_roster_submission(update, context)

def create_roster_conversation() -> ConversationHandler:
    """–°–æ–∑–¥–∞–µ—Ç ConversationHandler –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç–∞–±–µ–ª–µ–π - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    return ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start_roster_submission, pattern="^submit_roster$"),
            CallbackQueryHandler(restart_roster_submission, pattern="^roster_submit_new$")
        ],
        states={
            # ADDED: –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
            AWAITING_MODE_SELECTION: [
                CallbackQueryHandler(select_roster_mode, pattern="^roster_mode_")
            ],
            
            # –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
            AWAITING_ROLES_COUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_roles_input)
            ],
            CONFIRM_ROSTER: [
                CallbackQueryHandler(confirm_roster_save, pattern="^confirm_roster$")
            ],
            CONFIRM_DANGEROUS_ROSTER_SAVE: [
                CallbackQueryHandler(force_save_roster, pattern="^force_save_roster$")
            ],
            
            # ADDED: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
            INTERACTIVE_ROSTER_EDIT: [
                CallbackQueryHandler(handle_roster_button, pattern="^r")  # FIXED: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
            ],
        },
        fallbacks=[
            CallbackQueryHandler(cancel_roster_submission, pattern="^cancel_roster$"),
            CommandHandler('start', lambda u, c: ConversationHandler.END)
        ],
        per_user=True,
    )